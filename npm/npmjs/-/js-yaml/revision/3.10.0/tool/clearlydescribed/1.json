{
  "_metadata": {
    "type": "npm",
    "url": "cd:/npm/npmjs/-/js-yaml/3.10.0",
    "fetchedAt": "2018-02-17T19:33:39.875Z",
    "links": {
      "self": {
        "href": "urn:npm:npmjs:-:js-yaml:revision:3.10.0:tool:clearlydescribed:1",
        "type": "resource"
      },
      "siblings": {
        "href": "urn:npm:npmjs:-:js-yaml:revision:3.10.0",
        "type": "collection"
      },
      "scancode": {
        "href": "urn:npm:npmjs:-:js-yaml:revision:3.10.0:tool:scancode",
        "type": "collection"
      },
      "source": {
        "href": "urn:git:github:nodeca:js-yaml:revision:42e7fcccf10c74fe157b1f8eb9d73c1c25c3c259",
        "type": "resource"
      }
    },
    "version": 1,
    "processedAt": "2018-02-17T19:33:40.147Z"
  },
  "package.json": {
    "name": "js-yaml",
    "version": "3.10.0",
    "description": "YAML 1.2 parser and serializer",
    "keywords": [
      "yaml",
      "parser",
      "serializer",
      "pyyaml"
    ],
    "homepage": "https://github.com/nodeca/js-yaml",
    "author": "Vladimir Zapparov <dervus.grim@gmail.com>",
    "contributors": [
      "Aleksey V Zapparov <ixti@member.fsf.org> (http://www.ixti.net/)",
      "Vitaly Puzrin <vitaly@rcdesign.ru> (https://github.com/puzrin)",
      "Martin Grenfell <martin.grenfell@gmail.com> (http://got-ravings.blogspot.com)"
    ],
    "license": "MIT",
    "repository": "nodeca/js-yaml",
    "files": [
      "index.js",
      "lib/",
      "bin/",
      "dist/"
    ],
    "bin": {
      "js-yaml": "bin/js-yaml.js"
    },
    "dependencies": {
      "argparse": "^1.0.7",
      "esprima": "^4.0.0"
    },
    "devDependencies": {
      "ansi": "^0.3.1",
      "benchmark": "^2.1.4",
      "browserify": "^14.3.0",
      "codemirror": "^5.13.4",
      "eslint": "^4.1.1",
      "istanbul": "^0.4.5",
      "mocha": "^3.3.0",
      "uglify-js": "^3.0.1"
    },
    "scripts": {
      "test": "make test"
    }
  },
  "registryData": {
    "_id": "js-yaml",
    "_rev": "241-f14d16a17bcfcdf057f48331ed1e3b4e",
    "name": "js-yaml",
    "description": "YAML 1.2 parser and serializer",
    "dist-tags": {
      "latest": "3.10.0"
    },
    "maintainers": [
      {
        "name": "vitaly",
        "email": "vitaly@rcdesign.ru"
      }
    ],
    "author": {
      "name": "Vladimir Zapparov",
      "email": "dervus.grim@gmail.com"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/nodeca/js-yaml.git"
    },
    "users": {
      "pvorb": true,
      "matthiasg": true,
      "fgribreau": true,
      "sbruchmann": true,
      "adamrenny": true,
      "brianloveswords": true,
      "asilvas": true,
      "gabeio": true,
      "goliatone": true,
      "lewisbrown": true,
      "japh": true,
      "alxe.master": true,
      "dewang-mistry": true,
      "alvint": true,
      "brentonhouse": true,
      "jelhaouchi": true,
      "jdhartley": true,
      "itonyyo": true,
      "loki2302": true,
      "buzuli": true,
      "gerst20051": true,
      "rdcl": true,
      "brentlintner": true,
      "denji": true,
      "rdesoky": true,
      "willpracht": true,
      "paroczi": true,
      "eviratec": true,
      "lvivier": true,
      "smartcoordination": true,
      "fdeneux": true,
      "monsterkodi": true,
      "evan2x": true,
      "octetstream": true,
      "mfellner": true,
      "bjmin": true,
      "leodutra": true,
      "ambdxtrch": true,
      "ajmckee": true,
      "coalesce": true,
      "pstoev": true,
      "illuminator": true,
      "shanewholloway": true,
      "wouter_vdb": true,
      "nigel0913": true,
      "fleischer": true,
      "monjer": true,
      "nukosuke": true,
      "captison": true,
      "cknowles": true,
      "talltotal": true,
      "leizongmin": true,
      "akarem": true,
      "mikestaub": true,
      "jakedetels": true,
      "hifaraz": true,
      "bensonho": true,
      "ajduke": true,
      "tteogi": true,
      "tmurngon": true,
      "gabriellopes": true,
      "penglu": true,
      "troygizzi": true,
      "gbas": true,
      "prometheas": true,
      "iori20091101": true,
      "skellertor": true,
      "rickyrattlesnake": true,
      "program247365": true,
      "leonzhao": true,
      "janez89": true,
      "tcrowe": true,
      "bsara": true,
      "kael": true,
      "holmes89": true,
      "quafoo": true,
      "lacodda": true,
      "crimeminister": true,
      "stone_breaker": true,
      "nikolay": true,
      "kontrax": true,
      "stanlous": true,
      "axelrindle": true,
      "modood": true,
      "bphanikumar": true,
      "lvpeng101": true,
      "yitzchak": true,
      "tsxuehu": true,
      "lholmquist": true,
      "felarof99": true,
      "elevenlui": true,
      "kakaman": true,
      "lgh06": true,
      "kekdude": true,
      "edwardxyt": true,
      "keenwon": true,
      "d7game": true,
      "geofftech": true,
      "hehaiyang": true,
      "rogeruiz": true,
      "muwum": true,
      "bstevenson": true,
      "zhenguo.zhao": true,
      "omar84": true,
      "nickeltobias": true,
      "nilz3ro": true,
      "jream": true,
      "chrisyipw": true,
      "nuwaio": true,
      "sammade": true,
      "tamikot": true,
      "chronosis": true,
      "eterna2": true,
      "maxkoryukov": true,
      "astraloverflow": true,
      "nraibaud": true,
      "onlyutkarsh": true,
      "ierhyna": true
    },
    "readme": "JS-YAML - YAML 1.2 parser / writer for JavaScript\n=================================================\n\n[![Build Status](https://travis-ci.org/nodeca/js-yaml.svg?branch=master)](https://travis-ci.org/nodeca/js-yaml)\n[![NPM version](https://img.shields.io/npm/v/js-yaml.svg)](https://www.npmjs.org/package/js-yaml)\n\n__[Online Demo](http://nodeca.github.com/js-yaml/)__\n\n\nThis is an implementation of [YAML](http://yaml.org/), a human-friendly data\nserialization language. Started as [PyYAML](http://pyyaml.org/) port, it was\ncompletely rewritten from scratch. Now it's very fast, and supports 1.2 spec.\n\n\nInstallation\n------------\n\n### YAML module for node.js\n\n```\nnpm install js-yaml\n```\n\n\n### CLI executable\n\nIf you want to inspect your YAML files from CLI, install js-yaml globally:\n\n```\nnpm install -g js-yaml\n```\n\n#### Usage\n\n```\nusage: js-yaml [-h] [-v] [-c] [-t] file\n\nPositional arguments:\n  file           File with YAML document(s)\n\nOptional arguments:\n  -h, --help     Show this help message and exit.\n  -v, --version  Show program's version number and exit.\n  -c, --compact  Display errors in compact mode\n  -t, --trace    Show stack trace on error\n```\n\n\n### Bundled YAML library for browsers\n\n``` html\n<!-- esprima required only for !!js/function -->\n<script src=\"esprima.js\"></script>\n<script src=\"js-yaml.min.js\"></script>\n<script type=\"text/javascript\">\nvar doc = jsyaml.load('greeting: hello\\nname: world');\n</script>\n```\n\nBrowser support was done mostly for the online demo. If you find any errors - feel\nfree to send pull requests with fixes. Also note, that IE and other old browsers\nneeds [es5-shims](https://github.com/kriskowal/es5-shim) to operate.\n\nNotes:\n\n1. We have no resources to support browserified version. Don't expect it to be\n   well tested. Don't expect fast fixes if something goes wrong there.\n2. `!!js/function` in browser bundle will not work by default. If you really need\n   it - load `esprima` parser first (via amd or directly).\n3. `!!bin` in browser will return `Array`, because browsers do not support\n   node.js `Buffer` and adding Buffer shims is completely useless on practice.\n\n\nAPI\n---\n\nHere we cover the most 'useful' methods. If you need advanced details (creating\nyour own tags), see [wiki](https://github.com/nodeca/js-yaml/wiki) and\n[examples](https://github.com/nodeca/js-yaml/tree/master/examples) for more\ninfo.\n\n``` javascript\nyaml = require('js-yaml');\nfs   = require('fs');\n\n// Get document, or throw exception on error\ntry {\n  var doc = yaml.safeLoad(fs.readFileSync('/home/ixti/example.yml', 'utf8'));\n  console.log(doc);\n} catch (e) {\n  console.log(e);\n}\n```\n\n\n### safeLoad (string [ , options ])\n\n**Recommended loading way.** Parses `string` as single YAML document. Returns a JavaScript\nobject or throws `YAMLException` on error. By default, does not support regexps,\nfunctions and undefined. This method is safe for untrusted data.\n\noptions:\n\n- `filename` _(default: null)_ - string to be used as a file path in\n  error/warning messages.\n- `onWarning` _(default: null)_ - function to call on warning messages.\n  Loader will throw on warnings if this function is not provided.\n- `schema` _(default: `DEFAULT_SAFE_SCHEMA`)_ - specifies a schema to use.\n  - `FAILSAFE_SCHEMA` - only strings, arrays and plain objects:\n    http://www.yaml.org/spec/1.2/spec.html#id2802346\n  - `JSON_SCHEMA` - all JSON-supported types:\n    http://www.yaml.org/spec/1.2/spec.html#id2803231\n  - `CORE_SCHEMA` - same as `JSON_SCHEMA`:\n    http://www.yaml.org/spec/1.2/spec.html#id2804923\n  - `DEFAULT_SAFE_SCHEMA` - all supported YAML types, without unsafe ones\n    (`!!js/undefined`, `!!js/regexp` and `!!js/function`):\n    http://yaml.org/type/\n  - `DEFAULT_FULL_SCHEMA` - all supported YAML types.\n- `json` _(default: false)_ - compatibility with JSON.parse behaviour. If true, then duplicate keys in a mapping will override values rather than throwing an error.\n\nNOTE: This function **does not** understand multi-document sources, it throws\nexception on those.\n\nNOTE: JS-YAML **does not** support schema-specific tag resolution restrictions.\nSo, the JSON schema is not as strictly defined in the YAML specification.\nIt allows numbers in any notation, use `Null` and `NULL` as `null`, etc.\nThe core schema also has no such restrictions. It allows binary notation for integers.\n\n\n### load (string [ , options ])\n\n**Use with care with untrusted sources**. The same as `safeLoad()` but uses\n`DEFAULT_FULL_SCHEMA` by default - adds some JavaScript-specific types:\n`!!js/function`, `!!js/regexp` and `!!js/undefined`. For untrusted sources, you\nmust additionally validate object structure to avoid injections:\n\n``` javascript\nvar untrusted_code = '\"toString\": !<tag:yaml.org,2002:js/function> \"function (){very_evil_thing();}\"';\n\n// I'm just converting that string, what could possibly go wrong?\nrequire('js-yaml').load(untrusted_code) + ''\n```\n\n\n### safeLoadAll (string [, iterator] [, options ])\n\nSame as `safeLoad()`, but understands multi-document sources. Applies\n`iterator` to each document if specified, or returns array of documents.\n\n``` javascript\nvar yaml = require('js-yaml');\n\nyaml.safeLoadAll(data, function (doc) {\n  console.log(doc);\n});\n```\n\n\n### loadAll (string [, iterator] [ , options ])\n\nSame as `safeLoadAll()` but uses `DEFAULT_FULL_SCHEMA` by default.\n\n\n### safeDump (object [ , options ])\n\nSerializes `object` as a YAML document. Uses `DEFAULT_SAFE_SCHEMA`, so it will\nthrow an exception if you try to dump regexps or functions. However, you can\ndisable exceptions by setting the `skipInvalid` option to `true`.\n\noptions:\n\n- `indent` _(default: 2)_ - indentation width to use (in spaces).\n- `skipInvalid` _(default: false)_ - do not throw on invalid types (like function\n  in the safe schema) and skip pairs and single values with such types.\n- `flowLevel` (default: -1) - specifies level of nesting, when to switch from\n  block to flow style for collections. -1 means block style everwhere\n- `styles` - \"tag\" => \"style\" map. Each tag may have own set of styles.\n- `schema` _(default: `DEFAULT_SAFE_SCHEMA`)_ specifies a schema to use.\n- `sortKeys` _(default: `false`)_ - if `true`, sort keys when dumping YAML. If a\n  function, use the function to sort the keys.\n- `lineWidth` _(default: `80`)_ - set max line width.\n- `noRefs` _(default: `false`)_ - if `true`, don't convert duplicate objects into references\n- `noCompatMode` _(default: `false`)_ - if `true` don't try to be compatible with older\n  yaml versions. Currently: don't quote \"yes\", \"no\" and so on, as required for YAML 1.1\n- `condenseFlow` _(default: `false`)_ - if `true` flow sequences will be condensed, omitting the space between `a, b`. Eg. `'[a,b]'`, and omitting the space between `key: value` and quoting the key. Eg. `'{\"a\":b}'` Can be useful when using yaml for pretty URL query params as spaces are %-encoded.\n\nThe following table show availlable styles (e.g. \"canonical\",\n\"binary\"...) available for each tag (.e.g. !!null, !!int ...). Yaml\nouput is shown on the right side after `=>` (default setting) or `->`:\n\n``` none\n!!null\n  \"canonical\"   -> \"~\"\n  \"lowercase\"   => \"null\"\n  \"uppercase\"   -> \"NULL\"\n  \"camelcase\"   -> \"Null\"\n\n!!int\n  \"binary\"      -> \"0b1\", \"0b101010\", \"0b1110001111010\"\n  \"octal\"       -> \"01\", \"052\", \"016172\"\n  \"decimal\"     => \"1\", \"42\", \"7290\"\n  \"hexadecimal\" -> \"0x1\", \"0x2A\", \"0x1C7A\"\n\n!!bool\n  \"lowercase\"   => \"true\", \"false\"\n  \"uppercase\"   -> \"TRUE\", \"FALSE\"\n  \"camelcase\"   -> \"True\", \"False\"\n\n!!float\n  \"lowercase\"   => \".nan\", '.inf'\n  \"uppercase\"   -> \".NAN\", '.INF'\n  \"camelcase\"   -> \".NaN\", '.Inf'\n```\n\nExample:\n\n``` javascript\nsafeDump (object, {\n  'styles': {\n    '!!null': 'canonical' // dump null as ~\n  },\n  'sortKeys': true        // sort object keys\n});\n```\n\n### dump (object [ , options ])\n\nSame as `safeDump()` but without limits (uses `DEFAULT_FULL_SCHEMA` by default).\n\n\nSupported YAML types\n--------------------\n\nThe list of standard YAML tags and corresponding JavaScipt types. See also\n[YAML tag discussion](http://pyyaml.org/wiki/YAMLTagDiscussion) and\n[YAML types repository](http://yaml.org/type/).\n\n```\n!!null ''                   # null\n!!bool 'yes'                # bool\n!!int '3...'                # number\n!!float '3.14...'           # number\n!!binary '...base64...'     # buffer\n!!timestamp 'YYYY-...'      # date\n!!omap [ ... ]              # array of key-value pairs\n!!pairs [ ... ]             # array or array pairs\n!!set { ... }               # array of objects with given keys and null values\n!!str '...'                 # string\n!!seq [ ... ]               # array\n!!map { ... }               # object\n```\n\n**JavaScript-specific tags**\n\n```\n!!js/regexp /pattern/gim            # RegExp\n!!js/undefined ''                   # Undefined\n!!js/function 'function () {...}'   # Function\n```\n\nCaveats\n-------\n\nNote, that you use arrays or objects as key in JS-YAML. JS does not allow objects\nor arrays as keys, and stringifies (by calling `toString()` method) them at the\nmoment of adding them.\n\n``` yaml\n---\n? [ foo, bar ]\n: - baz\n? { foo: bar }\n: - baz\n  - baz\n```\n\n``` javascript\n{ \"foo,bar\": [\"baz\"], \"[object Object]\": [\"baz\", \"baz\"] }\n```\n\nAlso, reading of properties on implicit block mapping keys is not supported yet.\nSo, the following YAML document cannot be loaded.\n\n``` yaml\n&anchor foo:\n  foo: bar\n  *anchor: duplicate key\n  baz: bat\n  *anchor: duplicate key\n```\n\n\nBreaking changes in 2.x.x -> 3.x.x\n----------------------------------\n\nIf you have not used __custom__ tags or loader classes and not loaded yaml\nfiles via `require()`, no changes are needed. Just upgrade the library.\n\nOtherwise, you should:\n\n1. Replace all occurrences of `require('xxxx.yml')` by `fs.readFileSync()` +\n  `yaml.safeLoad()`.\n2. rewrite your custom tags constructors and custom loader\n  classes, to conform the new API. See\n  [examples](https://github.com/nodeca/js-yaml/tree/master/examples) and\n  [wiki](https://github.com/nodeca/js-yaml/wiki) for details.\n\n\nLicense\n-------\n\nView the [LICENSE](https://github.com/nodeca/js-yaml/blob/master/LICENSE) file\n(MIT).\n",
    "homepage": "https://github.com/nodeca/js-yaml",
    "keywords": [
      "yaml",
      "parser",
      "serializer",
      "pyyaml"
    ],
    "contributors": [
      {
        "name": "Aleksey V Zapparov",
        "email": "ixti@member.fsf.org",
        "url": "http://www.ixti.net/"
      },
      {
        "name": "Vitaly Puzrin",
        "email": "vitaly@rcdesign.ru",
        "url": "https://github.com/puzrin"
      },
      {
        "name": "Martin Grenfell",
        "email": "martin.grenfell@gmail.com",
        "url": "http://got-ravings.blogspot.com"
      }
    ],
    "bugs": {
      "url": "https://github.com/nodeca/js-yaml/issues"
    },
    "license": "MIT",
    "readmeFilename": "README.md",
    "_attachments": {},
    "manifest": {
      "name": "js-yaml",
      "version": "3.10.0",
      "description": "YAML 1.2 parser and serializer",
      "keywords": [
        "yaml",
        "parser",
        "serializer",
        "pyyaml"
      ],
      "homepage": "https://github.com/nodeca/js-yaml",
      "author": {
        "name": "Vladimir Zapparov",
        "email": "dervus.grim@gmail.com"
      },
      "contributors": [
        {
          "name": "Aleksey V Zapparov",
          "email": "ixti@member.fsf.org",
          "url": "http://www.ixti.net/"
        },
        {
          "name": "Vitaly Puzrin",
          "email": "vitaly@rcdesign.ru",
          "url": "https://github.com/puzrin"
        },
        {
          "name": "Martin Grenfell",
          "email": "martin.grenfell@gmail.com",
          "url": "http://got-ravings.blogspot.com"
        }
      ],
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/nodeca/js-yaml.git"
      },
      "files": [
        "index.js",
        "lib/",
        "bin/",
        "dist/"
      ],
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      },
      "dependencies": {
        "argparse": "^1.0.7",
        "esprima": "^4.0.0"
      },
      "devDependencies": {
        "ansi": "^0.3.1",
        "benchmark": "^2.1.4",
        "browserify": "^14.3.0",
        "codemirror": "^5.13.4",
        "eslint": "^4.1.1",
        "istanbul": "^0.4.5",
        "mocha": "^3.3.0",
        "uglify-js": "^3.0.1"
      },
      "scripts": {
        "test": "make test"
      },
      "gitHead": "42e7fcccf10c74fe157b1f8eb9d73c1c25c3c259",
      "bugs": {
        "url": "https://github.com/nodeca/js-yaml/issues"
      },
      "_id": "js-yaml@3.10.0",
      "_npmVersion": "5.3.0",
      "_nodeVersion": "8.4.0",
      "_npmUser": {
        "name": "vitaly",
        "email": "vitaly@rcdesign.ru"
      },
      "maintainers": [
        {
          "name": "vitaly",
          "email": "vitaly@rcdesign.ru"
        }
      ],
      "dist": {
        "integrity": "sha512-O2v52ffjLa9VeM43J4XocZE//WT9N0IiwDa3KSHH7Tu8CtH+1qM8SIZvnsTh6v+4yFy5KUY3BHUVwjpfAWsjIA==",
        "shasum": "2e78441646bd4682e963f22b6e92823c309c62dc",
        "tarball": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.10.0.tgz"
      },
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/js-yaml-3.10.0.tgz_1505117951321_0.05147904600016773"
      },
      "directories": {}
    },
    "releaseDate": "2017-09-11T08:19:12.765Z"
  },
  "sourceInfo": {
    "type": "git",
    "provider": "github",
    "url": "https://github.com/nodeca/js-yaml",
    "revision": "42e7fcccf10c74fe157b1f8eb9d73c1c25c3c259",
    "path": null
  }
}