{
  "_metadata": {
    "type": "npm",
    "url": "cd:/npm/npmjs/-/body-parser/1.18.2",
    "fetchedAt": "2018-02-18T06:43:44.542Z",
    "links": {
      "self": {
        "href": "urn:npm:npmjs:-:body-parser:revision:1.18.2:tool:clearlydescribed:1",
        "type": "resource"
      },
      "siblings": {
        "href": "urn:npm:npmjs:-:body-parser:revision:1.18.2:tool:clearlydescribed",
        "type": "collection"
      },
      "scancode": {
        "href": "urn:npm:npmjs:-:body-parser:revision:1.18.2:tool:scancode",
        "type": "collection"
      },
      "source": {
        "href": "urn:git:github:expressjs:body-parser:revision:b2659a7af3b413a2d1df274bef409fe6cdcf6b8f",
        "type": "resource"
      }
    },
    "version": 1,
    "processedAt": "2018-02-18T06:43:44.824Z"
  },
  "package.json": {
    "name": "body-parser",
    "description": "Node.js body parsing middleware",
    "version": "1.18.2",
    "contributors": [
      "Douglas Christopher Wilson <doug@somethingdoug.com>",
      "Jonathan Ong <me@jongleberry.com> (http://jongleberry.com)"
    ],
    "license": "MIT",
    "repository": "expressjs/body-parser",
    "dependencies": {
      "bytes": "3.0.0",
      "content-type": "~1.0.4",
      "debug": "2.6.9",
      "depd": "~1.1.1",
      "http-errors": "~1.6.2",
      "iconv-lite": "0.4.19",
      "on-finished": "~2.3.0",
      "qs": "6.5.1",
      "raw-body": "2.3.2",
      "type-is": "~1.6.15"
    },
    "devDependencies": {
      "eslint": "3.19.0",
      "eslint-config-standard": "10.2.1",
      "eslint-plugin-import": "2.7.0",
      "eslint-plugin-markdown": "1.0.0-beta.6",
      "eslint-plugin-node": "5.1.1",
      "eslint-plugin-promise": "3.5.0",
      "eslint-plugin-standard": "3.0.1",
      "istanbul": "0.4.5",
      "methods": "1.1.2",
      "mocha": "2.5.3",
      "safe-buffer": "5.1.1",
      "supertest": "1.1.0"
    },
    "files": [
      "lib/",
      "LICENSE",
      "HISTORY.md",
      "index.js"
    ],
    "engines": {
      "node": ">= 0.8"
    },
    "scripts": {
      "lint": "eslint --plugin markdown --ext js,md .",
      "test": "mocha --require test/support/env --reporter spec --check-leaks --bail test/",
      "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --require test/support/env --reporter dot --check-leaks test/",
      "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/"
    }
  },
  "registryData": {
    "_id": "body-parser",
    "_rev": "762-73c702cf8b2c45c34336d381aa9d657d",
    "name": "body-parser",
    "description": "Node.js body parsing middleware",
    "dist-tags": {
      "latest": "1.18.2"
    },
    "readme": "# body-parser\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n[![Gratipay][gratipay-image]][gratipay-url]\n\nNode.js body parsing middleware.\n\nParse incoming request bodies in a middleware before your handlers, available\nunder the `req.body` property.\n\n[Learn about the anatomy of an HTTP transaction in Node.js](https://nodejs.org/en/docs/guides/anatomy-of-an-http-transaction/).\n\n_This does not handle multipart bodies_, due to their complex and typically\nlarge nature. For multipart bodies, you may be interested in the following\nmodules:\n\n  * [busboy](https://www.npmjs.org/package/busboy#readme) and\n    [connect-busboy](https://www.npmjs.org/package/connect-busboy#readme)\n  * [multiparty](https://www.npmjs.org/package/multiparty#readme) and\n    [connect-multiparty](https://www.npmjs.org/package/connect-multiparty#readme)\n  * [formidable](https://www.npmjs.org/package/formidable#readme)\n  * [multer](https://www.npmjs.org/package/multer#readme)\n\nThis module provides the following parsers:\n\n  * [JSON body parser](#bodyparserjsonoptions)\n  * [Raw body parser](#bodyparserrawoptions)\n  * [Text body parser](#bodyparsertextoptions)\n  * [URL-encoded form body parser](#bodyparserurlencodedoptions)\n\nOther body parsers you might be interested in:\n\n- [body](https://www.npmjs.org/package/body#readme)\n- [co-body](https://www.npmjs.org/package/co-body#readme)\n\n## Installation\n\n```sh\n$ npm install body-parser\n```\n\n## API\n\n<!-- eslint-disable no-unused-vars -->\n\n```js\nvar bodyParser = require('body-parser')\n```\n\nThe `bodyParser` object exposes various factories to create middlewares. All\nmiddlewares will populate the `req.body` property with the parsed body when\nthe `Content-Type` request header matches the `type` option, or an empty\nobject (`{}`) if there was no body to parse, the `Content-Type` was not matched,\nor an error occurred.\n\nThe various errors returned by this module are described in the\n[errors section](#errors).\n\n### bodyParser.json([options])\n\nReturns middleware that only parses `json` and only looks at requests where\nthe `Content-Type` header matches the `type` option. This parser accepts any\nUnicode encoding of the body and supports automatic inflation of `gzip` and\n`deflate` encodings.\n\nA new `body` object containing the parsed data is populated on the `request`\nobject after the middleware (i.e. `req.body`).\n\n#### Options\n\nThe `json` function takes an optional `options` object that may contain any of\nthe following keys:\n\n##### inflate\n\nWhen set to `true`, then deflated (compressed) bodies will be inflated; when\n`false`, deflated bodies are rejected. Defaults to `true`.\n\n##### limit\n\nControls the maximum request body size. If this is a number, then the value\nspecifies the number of bytes; if it is a string, the value is passed to the\n[bytes](https://www.npmjs.com/package/bytes) library for parsing. Defaults\nto `'100kb'`.\n\n##### reviver\n\nThe `reviver` option is passed directly to `JSON.parse` as the second\nargument. You can find more information on this argument\n[in the MDN documentation about JSON.parse](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Example.3A_Using_the_reviver_parameter).\n\n##### strict\n\nWhen set to `true`, will only accept arrays and objects; when `false` will\naccept anything `JSON.parse` accepts. Defaults to `true`.\n\n##### type\n\nThe `type` option is used to determine what media type the middleware will\nparse. This option can be a function or a string. If a string, `type` option\nis passed directly to the [type-is](https://www.npmjs.org/package/type-is#readme)\nlibrary and this can be an extension name (like `json`), a mime type (like\n`application/json`), or a mime type with a wildcard (like `*/*` or `*/json`).\nIf a function, the `type` option is called as `fn(req)` and the request is\nparsed if it returns a truthy value. Defaults to `application/json`.\n\n##### verify\n\nThe `verify` option, if supplied, is called as `verify(req, res, buf, encoding)`,\nwhere `buf` is a `Buffer` of the raw request body and `encoding` is the\nencoding of the request. The parsing can be aborted by throwing an error.\n\n### bodyParser.raw([options])\n\nReturns middleware that parses all bodies as a `Buffer` and only looks at\nrequests where the `Content-Type` header matches the `type` option. This\nparser supports automatic inflation of `gzip` and `deflate` encodings.\n\nA new `body` object containing the parsed data is populated on the `request`\nobject after the middleware (i.e. `req.body`). This will be a `Buffer` object\nof the body.\n\n#### Options\n\nThe `raw` function takes an optional `options` object that may contain any of\nthe following keys:\n\n##### inflate\n\nWhen set to `true`, then deflated (compressed) bodies will be inflated; when\n`false`, deflated bodies are rejected. Defaults to `true`.\n\n##### limit\n\nControls the maximum request body size. If this is a number, then the value\nspecifies the number of bytes; if it is a string, the value is passed to the\n[bytes](https://www.npmjs.com/package/bytes) library for parsing. Defaults\nto `'100kb'`.\n\n##### type\n\nThe `type` option is used to determine what media type the middleware will\nparse. This option can be a function or a string. If a string, `type` option\nis passed directly to the [type-is](https://www.npmjs.org/package/type-is#readme)\nlibrary and this can be an extension name (like `bin`), a mime type (like\n`application/octet-stream`), or a mime type with a wildcard (like `*/*` or\n`application/*`). If a function, the `type` option is called as `fn(req)`\nand the request is parsed if it returns a truthy value. Defaults to\n`application/octet-stream`.\n\n##### verify\n\nThe `verify` option, if supplied, is called as `verify(req, res, buf, encoding)`,\nwhere `buf` is a `Buffer` of the raw request body and `encoding` is the\nencoding of the request. The parsing can be aborted by throwing an error.\n\n### bodyParser.text([options])\n\nReturns middleware that parses all bodies as a string and only looks at\nrequests where the `Content-Type` header matches the `type` option. This\nparser supports automatic inflation of `gzip` and `deflate` encodings.\n\nA new `body` string containing the parsed data is populated on the `request`\nobject after the middleware (i.e. `req.body`). This will be a string of the\nbody.\n\n#### Options\n\nThe `text` function takes an optional `options` object that may contain any of\nthe following keys:\n\n##### defaultCharset\n\nSpecify the default character set for the text content if the charset is not\nspecified in the `Content-Type` header of the request. Defaults to `utf-8`.\n\n##### inflate\n\nWhen set to `true`, then deflated (compressed) bodies will be inflated; when\n`false`, deflated bodies are rejected. Defaults to `true`.\n\n##### limit\n\nControls the maximum request body size. If this is a number, then the value\nspecifies the number of bytes; if it is a string, the value is passed to the\n[bytes](https://www.npmjs.com/package/bytes) library for parsing. Defaults\nto `'100kb'`.\n\n##### type\n\nThe `type` option is used to determine what media type the middleware will\nparse. This option can be a function or a string. If a string, `type` option\nis passed directly to the [type-is](https://www.npmjs.org/package/type-is#readme)\nlibrary and this can be an extension name (like `txt`), a mime type (like\n`text/plain`), or a mime type with a wildcard (like `*/*` or `text/*`).\nIf a function, the `type` option is called as `fn(req)` and the request is\nparsed if it returns a truthy value. Defaults to `text/plain`.\n\n##### verify\n\nThe `verify` option, if supplied, is called as `verify(req, res, buf, encoding)`,\nwhere `buf` is a `Buffer` of the raw request body and `encoding` is the\nencoding of the request. The parsing can be aborted by throwing an error.\n\n### bodyParser.urlencoded([options])\n\nReturns middleware that only parses `urlencoded` bodies and only looks at\nrequests where the `Content-Type` header matches the `type` option. This\nparser accepts only UTF-8 encoding of the body and supports automatic\ninflation of `gzip` and `deflate` encodings.\n\nA new `body` object containing the parsed data is populated on the `request`\nobject after the middleware (i.e. `req.body`). This object will contain\nkey-value pairs, where the value can be a string or array (when `extended` is\n`false`), or any type (when `extended` is `true`).\n\n#### Options\n\nThe `urlencoded` function takes an optional `options` object that may contain\nany of the following keys:\n\n##### extended\n\nThe `extended` option allows to choose between parsing the URL-encoded data\nwith the `querystring` library (when `false`) or the `qs` library (when\n`true`). The \"extended\" syntax allows for rich objects and arrays to be\nencoded into the URL-encoded format, allowing for a JSON-like experience\nwith URL-encoded. For more information, please\n[see the qs library](https://www.npmjs.org/package/qs#readme).\n\nDefaults to `true`, but using the default has been deprecated. Please\nresearch into the difference between `qs` and `querystring` and choose the\nappropriate setting.\n\n##### inflate\n\nWhen set to `true`, then deflated (compressed) bodies will be inflated; when\n`false`, deflated bodies are rejected. Defaults to `true`.\n\n##### limit\n\nControls the maximum request body size. If this is a number, then the value\nspecifies the number of bytes; if it is a string, the value is passed to the\n[bytes](https://www.npmjs.com/package/bytes) library for parsing. Defaults\nto `'100kb'`.\n\n##### parameterLimit\n\nThe `parameterLimit` option controls the maximum number of parameters that\nare allowed in the URL-encoded data. If a request contains more parameters\nthan this value, a 413 will be returned to the client. Defaults to `1000`.\n\n##### type\n\nThe `type` option is used to determine what media type the middleware will\nparse. This option can be a function or a string. If a string, `type` option\nis passed directly to the [type-is](https://www.npmjs.org/package/type-is#readme)\nlibrary and this can be an extension name (like `urlencoded`), a mime type (like\n`application/x-www-form-urlencoded`), or a mime type with a wildcard (like\n`*/x-www-form-urlencoded`). If a function, the `type` option is called as\n`fn(req)` and the request is parsed if it returns a truthy value. Defaults\nto `application/x-www-form-urlencoded`.\n\n##### verify\n\nThe `verify` option, if supplied, is called as `verify(req, res, buf, encoding)`,\nwhere `buf` is a `Buffer` of the raw request body and `encoding` is the\nencoding of the request. The parsing can be aborted by throwing an error.\n\n## Errors\n\nThe middlewares provided by this module create errors depending on the error\ncondition during parsing. The errors will typically have a `status`/`statusCode`\nproperty that contains the suggested HTTP response code, an `expose` property\nto determine if the `message` property should be displayed to the client, a\n`type` property to determine the type of error without matching against the\n`message`, and a `body` property containing the read body, if available.\n\nThe following are the common errors emitted, though any error can come through\nfor various reasons.\n\n### content encoding unsupported\n\nThis error will occur when the request had a `Content-Encoding` header that\ncontained an encoding but the \"inflation\" option was set to `false`. The\n`status` property is set to `415`, the `type` property is set to\n`'encoding.unsupported'`, and the `charset` property will be set to the\nencoding that is unsupported.\n\n### request aborted\n\nThis error will occur when the request is aborted by the client before reading\nthe body has finished. The `received` property will be set to the number of\nbytes received before the request was aborted and the `expected` property is\nset to the number of expected bytes. The `status` property is set to `400`\nand `type` property is set to `'request.aborted'`.\n\n### request entity too large\n\nThis error will occur when the request body's size is larger than the \"limit\"\noption. The `limit` property will be set to the byte limit and the `length`\nproperty will be set to the request body's length. The `status` property is\nset to `413` and the `type` property is set to `'entity.too.large'`.\n\n### request size did not match content length\n\nThis error will occur when the request's length did not match the length from\nthe `Content-Length` header. This typically occurs when the request is malformed,\ntypically when the `Content-Length` header was calculated based on characters\ninstead of bytes. The `status` property is set to `400` and the `type` property\nis set to `'request.size.invalid'`.\n\n### stream encoding should not be set\n\nThis error will occur when something called the `req.setEncoding` method prior\nto this middleware. This module operates directly on bytes only and you cannot\ncall `req.setEncoding` when using this module. The `status` property is set to\n`500` and the `type` property is set to `'stream.encoding.set'`.\n\n### too many parameters\n\nThis error will occur when the content of the request exceeds the configured\n`parameterLimit` for the `urlencoded` parser. The `status` property is set to\n`413` and the `type` property is set to `'parameters.too.many'`.\n\n### unsupported charset \"BOGUS\"\n\nThis error will occur when the request had a charset parameter in the\n`Content-Type` header, but the `iconv-lite` module does not support it OR the\nparser does not support it. The charset is contained in the message as well\nas in the `charset` property. The `status` property is set to `415`, the\n`type` property is set to `'charset.unsupported'`, and the `charset` property\nis set to the charset that is unsupported.\n\n### unsupported content encoding \"bogus\"\n\nThis error will occur when the request had a `Content-Encoding` header that\ncontained an unsupported encoding. The encoding is contained in the message\nas well as in the `encoding` property. The `status` property is set to `415`,\nthe `type` property is set to `'encoding.unsupported'`, and the `encoding`\nproperty is set to the encoding that is unsupported.\n\n## Examples\n\n### Express/Connect top-level generic\n\nThis example demonstrates adding a generic JSON and URL-encoded parser as a\ntop-level middleware, which will parse the bodies of all incoming requests.\nThis is the simplest setup.\n\n```js\nvar express = require('express')\nvar bodyParser = require('body-parser')\n\nvar app = express()\n\n// parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({ extended: false }))\n\n// parse application/json\napp.use(bodyParser.json())\n\napp.use(function (req, res) {\n  res.setHeader('Content-Type', 'text/plain')\n  res.write('you posted:\\n')\n  res.end(JSON.stringify(req.body, null, 2))\n})\n```\n\n### Express route-specific\n\nThis example demonstrates adding body parsers specifically to the routes that\nneed them. In general, this is the most recommended way to use body-parser with\nExpress.\n\n```js\nvar express = require('express')\nvar bodyParser = require('body-parser')\n\nvar app = express()\n\n// create application/json parser\nvar jsonParser = bodyParser.json()\n\n// create application/x-www-form-urlencoded parser\nvar urlencodedParser = bodyParser.urlencoded({ extended: false })\n\n// POST /login gets urlencoded bodies\napp.post('/login', urlencodedParser, function (req, res) {\n  if (!req.body) return res.sendStatus(400)\n  res.send('welcome, ' + req.body.username)\n})\n\n// POST /api/users gets JSON bodies\napp.post('/api/users', jsonParser, function (req, res) {\n  if (!req.body) return res.sendStatus(400)\n  // create user in req.body\n})\n```\n\n### Change accepted type for parsers\n\nAll the parsers accept a `type` option which allows you to change the\n`Content-Type` that the middleware will parse.\n\n```js\nvar express = require('express')\nvar bodyParser = require('body-parser')\n\nvar app = express()\n\n// parse various different custom JSON types as JSON\napp.use(bodyParser.json({ type: 'application/*+json' }))\n\n// parse some custom thing into a Buffer\napp.use(bodyParser.raw({ type: 'application/vnd.custom-type' }))\n\n// parse an HTML body into a string\napp.use(bodyParser.text({ type: 'text/html' }))\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/body-parser.svg\n[npm-url]: https://npmjs.org/package/body-parser\n[travis-image]: https://img.shields.io/travis/expressjs/body-parser/master.svg\n[travis-url]: https://travis-ci.org/expressjs/body-parser\n[coveralls-image]: https://img.shields.io/coveralls/expressjs/body-parser/master.svg\n[coveralls-url]: https://coveralls.io/r/expressjs/body-parser?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/body-parser.svg\n[downloads-url]: https://npmjs.org/package/body-parser\n[gratipay-image]: https://img.shields.io/gratipay/dougwilson.svg\n[gratipay-url]: https://www.gratipay.com/dougwilson/\n",
    "maintainers": [
      {
        "name": "dougwilson",
        "email": "doug@somethingdoug.com"
      }
    ],
    "readmeFilename": "README.md",
    "homepage": "https://github.com/expressjs/body-parser#readme",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/expressjs/body-parser.git"
    },
    "bugs": {
      "url": "https://github.com/expressjs/body-parser/issues"
    },
    "license": "MIT",
    "users": {
      "83057396": true,
      "sironfoot": true,
      "summer": true,
      "runningtalus": true,
      "markymark": true,
      "matteospampani": true,
      "brianhanifin": true,
      "mr.raindrop": true,
      "mswanson1524": true,
      "bret": true,
      "franck.lahaye": true,
      "kingcron": true,
      "orangeclk": true,
      "shawn_ljw": true,
      "imzhi": true,
      "salvatorelab": true,
      "sergiodxa": true,
      "dofy": true,
      "swmoon203": true,
      "uniquerockrz": true,
      "baiej214": true,
      "dvk": true,
      "alexandermac": true,
      "damocles": true,
      "tsm91": true,
      "javimaravillas": true,
      "h4des": true,
      "lucasmciruzzi": true,
      "meme": true,
      "moxiaohe": true,
      "clunt": true,
      "f124275809": true,
      "dlpowless": true,
      "ayoungh": true,
      "nadimix": true,
      "haeck": true,
      "andreaspag": true,
      "x_soth": true,
      "drdanryan": true,
      "mccarter": true,
      "robermac": true,
      "tiendq": true,
      "wangnan0610": true,
      "markthethomas": true,
      "julienverkest": true,
      "qbylucky": true,
      "manxisuo": true,
      "docksteaderluke": true,
      "vboctor": true,
      "rugare": true,
      "drewigg": true,
      "jamescostian": true,
      "akiva": true,
      "subchen": true,
      "simplyianm": true,
      "dongxu": true,
      "ftornik": true,
      "mistertakaashi": true,
      "lifecube": true,
      "flyslow": true,
      "nickleefly": true,
      "amovah": true,
      "pengzhisun": true,
      "godion": true,
      "arnold-almeida": true,
      "kai_": true,
      "alexkval": true,
      "mkiser": true,
      "staraple": true,
      "softwind": true,
      "iamwiz": true,
      "richfoxton": true,
      "damianof": true,
      "ergunozyurt": true,
      "chaseshu": true,
      "glebec": true,
      "nikitka_m": true,
      "luuhoangnam": true,
      "nex": true,
      "liulei224": true,
      "largaah": true,
      "bpatel": true,
      "mano.rajesh": true,
      "xngiser": true,
      "freshlogic": true,
      "dustinphipps": true,
      "johnny.young": true,
      "m412c0": true,
      "yeahoffline": true,
      "emreparlayan42": true,
      "jeffb_incontact": true,
      "boyw165": true,
      "koulmomo": true,
      "dwayneford": true,
      "behumble": true,
      "justincann": true,
      "sixertoy": true,
      "stephn_r": true,
      "arifulhb": true,
      "jyounce": true,
      "keanodejs": true,
      "hema": true,
      "edwin_estrada": true,
      "nketchum": true,
      "nichoth": true,
      "jonatasnona": true,
      "vwal": true,
      "devdebonair": true,
      "esundahl": true,
      "mjurincic": true,
      "lherediawoodward": true,
      "ruyadorno": true,
      "grantcarthew": true,
      "nmccready": true,
      "jerkovicl": true,
      "knoja4": true,
      "ral.amgstromg": true,
      "markstos": true,
      "viktorivanov": true,
      "cspotcode": true,
      "kparkov": true,
      "iliyat": true,
      "wzbg": true,
      "phajej": true,
      "kungkk": true,
      "ramzesucr": true,
      "linuxwizard": true,
      "wkaifang": true,
      "davincho": true,
      "fleischer": true,
      "xeoneux": true,
      "crazyjingling": true,
      "nielsgl": true,
      "windhamdavid": true,
      "vbv": true,
      "jonabasque": true,
      "sigkill(9)": true,
      "matiasmarani": true,
      "almccann": true,
      "piyushmakhija": true,
      "cascadejs": true,
      "bapinney": true,
      "josejaguirre": true,
      "antanst": true,
      "christopher.urquidi": true,
      "raskawa": true,
      "volving": true,
      "monkeymonk": true,
      "xenohunter": true,
      "elessarkrin": true,
      "imd92": true,
      "freeface": true,
      "bian17888": true,
      "carlosvillademor": true,
      "richardcfelix": true,
      "faelcorreia": true,
      "ongmin": true,
      "sopepos": true,
      "apedz": true,
      "cfleschhut": true,
      "brandonccx": true,
      "rbartoli": true,
      "jamesbedont": true,
      "zainy": true,
      "msjcaetano": true,
      "animustechnology": true,
      "janez89": true,
      "justinliao": true,
      "sneakysnakeman": true,
      "davidbraun": true,
      "dimps": true,
      "urbantumbleweed": true,
      "djamseed": true,
      "jabbalaci": true,
      "yatsu": true,
      "novalu": true,
      "paragi": true,
      "swookie": true,
      "hyteer": true,
      "bruinebeer": true,
      "vishwasc": true,
      "mightymia": true,
      "ansuman": true,
      "crusaderltd": true,
      "kaveh.ghaboosi": true,
      "flozz": true,
      "psmorrow": true,
      "vleesbrood": true,
      "ryanlee": true,
      "nerdybeast": true,
      "starknode": true,
      "mikemimik": true,
      "monjer": true,
      "honpery": true,
      "ristostevcev": true,
      "figroc": true,
      "garrickajo": true,
      "philiiiiiipp": true,
      "fgarrido": true,
      "goodnighthsu": true,
      "kodekracker": true,
      "xufz": true,
      "alvajc": true,
      "zhanghaili": true,
      "ghe1219": true,
      "geooogle": true,
      "zbreakstone": true,
      "gracheff": true,
      "gejiawen": true,
      "lakipatel": true,
      "foto": true,
      "richard534": true,
      "sternelee": true,
      "kikna": true,
      "nolanthorn": true,
      "chrisx": true,
      "rubiadias": true,
      "sammok2003": true,
      "jasonwang1888": true,
      "asm2hex": true,
      "xu_q90": true,
      "peter__orosz": true,
      "igorissen": true,
      "landy2014": true,
      "sammffl": true,
      "tfentonz": true,
      "werdyin": true,
      "marlongrape": true,
      "sammyteahan": true,
      "elviopita": true,
      "princetoad": true,
      "isik": true,
      "ifeature": true,
      "lorenazohar": true,
      "faryangsh": true,
      "mkiramu": true,
      "mrbgit": true,
      "obouchari": true,
      "zhenzhuquan": true,
      "alahmadiq8": true,
      "grahamjpark": true,
      "kmaric": true,
      "djeck": true,
      "danielbankhead": true,
      "zhongyuan": true,
      "siirial": true,
      "fasdgoc": true,
      "pmasa": true,
      "ansing100": true,
      "encloud": true,
      "xudaolong": true,
      "junjiansyu": true,
      "apwn": true,
      "duskalbatross": true,
      "juangotama": true,
      "christopherritter": true,
      "bourne": true,
      "moamaoa": true,
      "roman-io": true,
      "luismoramedina": true,
      "manneken28": true,
      "x0000ff": true,
      "nanikore": true,
      "alin.alexa": true,
      "marcobiedermann": true,
      "koskokos": true,
      "anhurtado": true,
      "creativ073": true,
      "jonva": true,
      "moueza": true,
      "ggomma": true,
      "lhard": true,
      "sergoh": true,
      "mluberry": true,
      "studi11": true,
      "kjarisk": true,
      "samersm": true,
      "vzg03566": true,
      "scotchulous": true,
      "stephenhuh": true,
      "joelwallis": true,
      "mryeol": true,
      "ymk": true,
      "ryansalvador": true,
      "apopek": true,
      "jcarlos": true,
      "robba.jt": true,
      "mobeicaoyuan": true,
      "codevelopit": true,
      "dralc": true,
      "simon-yukuan": true,
      "scottfreecode": true,
      "roxnz": true,
      "adrian110288": true,
      "bigglesatlarge": true,
      "jmsherry": true,
      "dburdese": true,
      "djviolin": true,
      "phoenixsoul": true,
      "dabin": true,
      "tmurngon": true,
      "slmcassio": true,
      "kistoryg": true,
      "hyokosdeveloper": true,
      "awhmandan": true,
      "wuyangwang": true,
      "quafoo": true,
      "ognjen.jevremovic": true,
      "13lank.null": true,
      "chunxchun": true,
      "fsepulveda": true,
      "ab.moon": true,
      "khurshedyu": true,
      "suhaib.affan": true,
      "hodd": true,
      "tonyljl526": true,
      "kunalgaurav18": true,
      "sansgumen": true,
      "geduardcatalin": true,
      "muroc": true,
      "fahadjadoon": true,
      "ibambo": true,
      "dzhou777": true,
      "dawn_scroll": true,
      "dgray0229": true,
      "nusmql": true,
      "jetbug123": true,
      "langri-sha": true,
      "vasiltehanov": true,
      "soulevans07": true,
      "techyone": true,
      "tedyhy": true,
      "richard_san": true,
      "leondacosta": true,
      "adamdreszer": true,
      "dickeysprogramming": true,
      "a.sanchez": true,
      "ma-ha": true,
      "shanewholloway": true,
      "jirwong": true,
      "bradleybossard": true,
      "nicohe": true,
      "bsara": true,
      "wfcookie": true,
      "gui0704": true,
      "evegreen": true,
      "rocket0191": true,
      "sako73": true,
      "albertofdzm": true,
      "largepuma": true,
      "atulmy": true,
      "danielye": true,
      "tamer1an": true,
      "panos277": true,
      "adeelp": true,
      "yaphtes.ks": true,
      "sopov": true,
      "augiethornton": true,
      "evdokimovm": true,
      "mauriciolauffer": true,
      "brdjx": true,
      "sgvinci": true,
      "cschmitz81": true,
      "serge-nikitin": true,
      "olonam": true,
      "devnka": true,
      "frankl83": true,
      "panlw": true,
      "miloc": true,
      "isa424": true,
      "satoru": true,
      "isenricho": true,
      "yong_a": true,
      "madalozzo": true,
      "rlafferty": true,
      "nicomf1982": true,
      "qjawe": true,
      "masterofweb": true,
      "koobitor": true,
      "lightway82": true,
      "chinawolf_wyp": true,
      "chinjon": true,
      "dnero": true,
      "nate-river": true,
      "thomas.li": true,
      "tomchao": true,
      "diogocapela": true,
      "junos": true,
      "abpeinado": true,
      "lvpeng101": true,
      "milan322": true,
      "jaguarj": true,
      "tdevm": true,
      "htc2ubusiness": true,
      "devossa": true,
      "beatwinthewave": true,
      "leonardorb": true,
      "thetimmaeh": true,
      "vicsandoli": true,
      "nguyenmanhdat2903": true,
      "desmondddd": true,
      "zaks": true,
      "claudio76": true,
      "gpuente": true,
      "mife": true,
      "jakedalus": true,
      "malloryerik": true,
      "modood": true,
      "dylanh724": true,
      "hektve87": true,
      "shadyshrif": true,
      "chiaychang": true,
      "sommardnaiel": true,
      "chatm": true,
      "ray0214": true,
      "ys_sidson_aidson": true,
      "sibawite": true,
      "pddivine": true,
      "shoonia": true,
      "bigbird92": true,
      "karzanosman984": true,
      "seasons521": true,
      "grabantot": true,
      "viperchin": true,
      "fengmiaosen": true,
      "ironheartbj18": true,
      "toszter": true,
      "lwk": true,
      "kulyk404": true,
      "cantuga": true,
      "elevenlui": true,
      "lijq123": true,
      "vjudge": true,
      "nbuchanan": true,
      "kuzmicheff": true,
      "manojkhannakm": true,
      "cygik": true,
      "mknparreira": true,
      "wozhizui": true,
      "greganswer": true,
      "felegz": true,
      "livarion": true,
      "abhijitkalta": true,
      "kevinhassan": true,
      "ukuli": true,
      "pl0x": true,
      "sidkb": true,
      "lukaswilkeer": true,
      "asj1992": true,
      "wayn": true,
      "javadtyb": true,
      "zerouikit": true,
      "leelandmiller": true,
      "cetincem": true,
      "adriasb": true,
      "thangakumar": true,
      "swift2728": true,
      "winfredzhu": true,
      "seanr": true,
      "andrewlam": true,
      "nisimjoseph": true,
      "luffy84217": true,
      "_~": true,
      "starlord40k": true,
      "dimaroxx": true,
      "fmfsaisai": true,
      "zeroth007": true,
      "~arnold": true,
      "chenphoenix": true,
      "wesleylhandy": true,
      "scalz": true,
      "alanson": true,
      "paulkolesnyk": true,
      "marinear212": true,
      "isayme": true,
      "sayansaha": true,
      "lqweb": true,
      "ldq-first": true,
      "processbrain": true,
      "jerrywu12": true,
      "asfrom30": true,
      "nayuki": true,
      "rayjshin": true,
      "npmmurali": true,
      "mateussampsouza": true,
      "hexcola": true,
      "tiggem1993": true,
      "bart1208": true,
      "suryasaripalli": true,
      "itcorp": true,
      "svoss24": true,
      "allendale": true,
      "omar84": true,
      "deivbid": true,
      "waldrupm": true,
      "robinblomberg": true,
      "t0ngt0n9": true,
      "cbetancourt": true,
      "nestor": true,
      "enzoaliatis": true,
      "trinup": true,
      "guiyuzhao": true,
      "iamninad": true,
      "ehrig": true,
      "guogai": true,
      "wfalkwallace": true,
      "joey.dossche": true,
      "highgravity": true,
      "pajamasam": true,
      "wallenberg12": true,
      "dnp1204": true,
      "jakedemonaco": true,
      "kwabenaberko": true,
      "alshamiri2": true,
      "bumsuk": true,
      "tpkn": true,
      "dccunni171": true,
      "matthiasgrune": true,
      "renz0": true,
      "sdove1": true,
      "rubenjose75": true,
      "hduhdc": true,
      "leor": true,
      "henriesteves": true,
      "kkho595": true,
      "mahamdani": true,
      "bauhuynh2020": true,
      "coolhector": true,
      "shahabkhalvati": true,
      "jirqoadai": true,
      "keybouh": true,
      "tevins": true,
      "gabriel.fojo": true,
      "paulhanna33": true,
      "touskar": true,
      "maxwelldu": true,
      "kremr": true,
      "hanhq": true,
      "panzhiyong": true,
      "ookangzheng": true,
      "asadm2706": true,
      "lgh06": true,
      "ezeikel": true,
      "lotspecter": true,
      "manavsaxena": true,
      "laoshaw": true,
      "71emj1": true,
      "helcat": true,
      "nguyenvanhoang26041994": true,
      "pengliu": true,
      "asawq2006": true,
      "benigro": true,
      "shivayl": true,
      "tranceyos2419": true,
      "avivharuzi": true,
      "thomashzhu": true,
      "yb1997": true,
      "akshay.vs9543": true,
      "technolojay": true,
      "gabriel_hansson": true,
      "schacker": true,
      "ryaned": true,
      "imaginegenesis": true,
      "madeo": true,
      "isaacdagel": true,
      "alicebox": true,
      "renchiliu": true,
      "ashco": true,
      "mrhuangyuhui": true,
      "udaygowda": true,
      "salvationz": true,
      "rochejul": true,
      "obsessiveprogrammer": true,
      "bengi": true,
      "he313572052": true,
      "ralphkay": true,
      "arvi": true,
      "genbuhase": true,
      "midascreed": true,
      "dadoumda": true,
      "elitelegendary": true,
      "rabahtahraoui": true,
      "tdmalone": true,
      "karnavpargi": true,
      "gpmetheny": true,
      "edmondnow": true,
      "tangshingkwan": true,
      "shedule": true,
      "dgavilez": true,
      "cmangos": true,
      "luoyjx": true,
      "omkar.sheral.1989": true
    },
    "contributors": [
      {
        "name": "Douglas Christopher Wilson",
        "email": "doug@somethingdoug.com"
      },
      {
        "name": "Jonathan Ong",
        "email": "me@jongleberry.com",
        "url": "http://jongleberry.com"
      }
    ],
    "_attachments": {},
    "manifest": {
      "name": "body-parser",
      "description": "Node.js body parsing middleware",
      "version": "1.18.2",
      "contributors": [
        {
          "name": "Douglas Christopher Wilson",
          "email": "doug@somethingdoug.com"
        },
        {
          "name": "Jonathan Ong",
          "email": "me@jongleberry.com",
          "url": "http://jongleberry.com"
        }
      ],
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/expressjs/body-parser.git"
      },
      "dependencies": {
        "bytes": "3.0.0",
        "content-type": "~1.0.4",
        "debug": "2.6.9",
        "depd": "~1.1.1",
        "http-errors": "~1.6.2",
        "iconv-lite": "0.4.19",
        "on-finished": "~2.3.0",
        "qs": "6.5.1",
        "raw-body": "2.3.2",
        "type-is": "~1.6.15"
      },
      "devDependencies": {
        "eslint": "3.19.0",
        "eslint-config-standard": "10.2.1",
        "eslint-plugin-import": "2.7.0",
        "eslint-plugin-markdown": "1.0.0-beta.6",
        "eslint-plugin-node": "5.1.1",
        "eslint-plugin-promise": "3.5.0",
        "eslint-plugin-standard": "3.0.1",
        "istanbul": "0.4.5",
        "methods": "1.1.2",
        "mocha": "2.5.3",
        "safe-buffer": "5.1.1",
        "supertest": "1.1.0"
      },
      "files": [
        "lib/",
        "LICENSE",
        "HISTORY.md",
        "index.js"
      ],
      "engines": {
        "node": ">= 0.8"
      },
      "scripts": {
        "lint": "eslint --plugin markdown --ext js,md .",
        "test": "mocha --require test/support/env --reporter spec --check-leaks --bail test/",
        "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --require test/support/env --reporter dot --check-leaks test/",
        "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/"
      },
      "gitHead": "b2659a7af3b413a2d1df274bef409fe6cdcf6b8f",
      "bugs": {
        "url": "https://github.com/expressjs/body-parser/issues"
      },
      "homepage": "https://github.com/expressjs/body-parser#readme",
      "_id": "body-parser@1.18.2",
      "_shasum": "87678a19d84b47d859b83199bd59bce222b10454",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "6.11.1",
      "_npmUser": {
        "name": "dougwilson",
        "email": "doug@somethingdoug.com"
      },
      "dist": {
        "shasum": "87678a19d84b47d859b83199bd59bce222b10454",
        "tarball": "https://registry.npmjs.org/body-parser/-/body-parser-1.18.2.tgz"
      },
      "maintainers": [
        {
          "name": "dougwilson",
          "email": "doug@somethingdoug.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/body-parser-1.18.2.tgz_1506099009907_0.5088193896226585"
      },
      "directories": {}
    },
    "releaseDate": "2017-09-22T16:50:10.944Z"
  },
  "sourceInfo": {
    "type": "git",
    "provider": "github",
    "url": "https://github.com/expressjs/body-parser",
    "revision": "b2659a7af3b413a2d1df274bef409fe6cdcf6b8f",
    "path": null
  }
}