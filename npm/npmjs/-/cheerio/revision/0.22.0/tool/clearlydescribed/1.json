{
  "_metadata": {
    "type": "npm",
    "url": "cd:/npm/npmjs/-/cheerio/0.22.0",
    "fetchedAt": "2018-02-18T06:43:54.597Z",
    "links": {
      "self": {
        "href": "urn:npm:npmjs:-:cheerio:revision:0.22.0:tool:clearlydescribed:1",
        "type": "resource"
      },
      "siblings": {
        "href": "urn:npm:npmjs:-:cheerio:revision:0.22.0:tool:clearlydescribed",
        "type": "collection"
      },
      "scancode": {
        "href": "urn:npm:npmjs:-:cheerio:revision:0.22.0:tool:scancode",
        "type": "collection"
      },
      "source": {
        "href": "urn:git:github:cheeriojs:cheerio:revision:49b477e7fe98b74f61f77acd06a0ef4edb5c333e",
        "type": "resource"
      }
    },
    "version": 1,
    "processedAt": "2018-02-18T06:43:54.882Z"
  },
  "package.json": {
    "name": "cheerio",
    "version": "0.22.0",
    "description": "Tiny, fast, and elegant implementation of core jQuery designed specifically for the server",
    "author": "Matt Mueller <mattmuelle@gmail.com> (mat.io)",
    "license": "MIT",
    "keywords": [
      "htmlparser",
      "jquery",
      "selector",
      "scraper",
      "parser",
      "html"
    ],
    "repository": {
      "type": "git",
      "url": "git://github.com/cheeriojs/cheerio.git"
    },
    "main": "./index.js",
    "files": [
      "index.js",
      "lib"
    ],
    "engines": {
      "node": ">= 0.6"
    },
    "dependencies": {
      "css-select": "~1.2.0",
      "dom-serializer": "~0.1.0",
      "entities": "~1.1.1",
      "htmlparser2": "^3.9.1",
      "lodash.assignin": "^4.0.9",
      "lodash.bind": "^4.1.4",
      "lodash.defaults": "^4.0.1",
      "lodash.filter": "^4.4.0",
      "lodash.flatten": "^4.2.0",
      "lodash.foreach": "^4.3.0",
      "lodash.map": "^4.4.0",
      "lodash.merge": "^4.4.0",
      "lodash.pick": "^4.2.1",
      "lodash.reduce": "^4.4.0",
      "lodash.reject": "^4.4.0",
      "lodash.some": "^4.4.0"
    },
    "devDependencies": {
      "benchmark": "^2.1.0",
      "coveralls": "^2.11.9",
      "expect.js": "~0.3.1",
      "istanbul": "^0.4.3",
      "jsdom": "^9.2.1",
      "jquery": "^3.0.0",
      "jshint": "^2.9.2",
      "mocha": "^2.5.3",
      "xyz": "~0.5.0"
    },
    "scripts": {
      "test": "make test"
    }
  },
  "registryData": {
    "_id": "cheerio",
    "_rev": "829-211d1298ac09f6c2940088994e50c3e8",
    "name": "cheerio",
    "description": "Tiny, fast, and elegant implementation of core jQuery designed specifically for the server",
    "dist-tags": {
      "latest": "1.0.0-rc.2"
    },
    "maintainers": [
      {
        "name": "mattmueller",
        "email": "mattmuelle@gmail.com"
      },
      {
        "name": "davidchambers",
        "email": "dc@davidchambers.me"
      },
      {
        "name": "jugglinmike",
        "email": "mike@mikepennisi.com"
      },
      {
        "name": "feedic",
        "email": "me@feedic.com"
      }
    ],
    "author": {
      "name": "Matt Mueller",
      "email": "mattmuelle@gmail.com",
      "url": "mat.io"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/cheeriojs/cheerio.git"
    },
    "users": {
      "6174": true,
      "285858315": true,
      "fgribreau": true,
      "visnup": true,
      "hortinstein": true,
      "dpobel": true,
      "jxson": true,
      "sbruchmann": true,
      "charmander": true,
      "pid": true,
      "nak2k": true,
      "leesei": true,
      "joliva": true,
      "inca": true,
      "zeke": true,
      "svmatthews": true,
      "awaterma": true,
      "jswartwood": true,
      "stewartatkins": true,
      "parroit": true,
      "blakeembrey": true,
      "sushant711": true,
      "aselzer": true,
      "leodutra": true,
      "dino_su": true,
      "simme": true,
      "philippwiddra": true,
      "volkanongun": true,
      "appnus": true,
      "esundahl": true,
      "nancenick": true,
      "neckro": true,
      "devonning": true,
      "beaulebens": true,
      "blaidd_drwg": true,
      "apk": true,
      "hemanth": true,
      "legacy": true,
      "eugen814": true,
      "finnpauls": true,
      "humantriangle": true,
      "shen-weizhong": true,
      "fill": true,
      "stanzheng": true,
      "lichenhao": true,
      "rolandp": true,
      "tunnckocore": true,
      "davidrlee": true,
      "musically-ut": true,
      "menor": true,
      "hiwanz": true,
      "boustanihani": true,
      "arsnl": true,
      "herlon214": true,
      "chocolateboy": true,
      "bhaveshgohel": true,
      "directctrl": true,
      "emsure": true,
      "thebearingedge": true,
      "shanewholloway": true,
      "jalmenarez": true,
      "etiv": true,
      "buster": true,
      "zolern": true,
      "salvatorelab": true,
      "denmerc": true,
      "markov00": true,
      "vbm": true,
      "tapsboy": true,
      "kabomi": true,
      "phuego": true,
      "mimmo1": true,
      "dlion": true,
      "byossarian": true,
      "dgarlitt": true,
      "avinashkoyyana": true,
      "pingjiang": true,
      "restuta": true,
      "leohxj": true,
      "pensierinmusica": true,
      "adityabakle": true,
      "mihaiv": true,
      "cath": true,
      "eklem": true,
      "ajduke": true,
      "limingv5": true,
      "porkbits": true,
      "vmichalak": true,
      "scl33": true,
      "irfan3": true,
      "phette23": true,
      "eterna2": true,
      "yvanscher": true,
      "antouank": true,
      "lenville": true,
      "azder": true,
      "nickl": true,
      "mahpah": true,
      "dr-benton": true,
      "h4des": true,
      "lo1tuma": true,
      "frknbasaran": true,
      "seldo": true,
      "stri": true,
      "not-found": true,
      "dewang-mistry": true,
      "kenlimmj": true,
      "sloanb": true,
      "sujith3g": true,
      "mr.raindrop": true,
      "magemagic": true,
      "flyslow": true,
      "yasinaydin": true,
      "joeyespo": true,
      "jackvial": true,
      "hal9zillion": true,
      "brandonpapworth": true,
      "pyrou": true,
      "kulakowka": true,
      "noisypixy": true,
      "cilindrox": true,
      "samhwang1990": true,
      "ibruce": true,
      "zambon": true,
      "leonning": true,
      "risyasin": true,
      "gavinengel": true,
      "ericlondon": true,
      "gchudnov": true,
      "joshhartigan": true,
      "samhou1988": true,
      "mastayoda": true,
      "happy-coding": true,
      "tomjamescn": true,
      "joaocunha": true,
      "rachkoud": true,
      "dchem": true,
      "dongxu": true,
      "subchen": true,
      "shahzaib": true,
      "sm0ck1": true,
      "naij": true,
      "yashprit": true,
      "chengsu": true,
      "jmm23": true,
      "vsakaria": true,
      "wfsm": true,
      "wangnan0610": true,
      "yoshimaa-tricot": true,
      "sessionbean": true,
      "itonyyo": true,
      "makediff": true,
      "oheard": true,
      "dna2go": true,
      "tmcguire": true,
      "dac2205": true,
      "jcottam": true,
      "jerkovicl": true,
      "hkongm": true,
      "khaledkaram": true,
      "chrisscastaneda": true,
      "programmingpearls": true,
      "jesusgoku": true,
      "nmadd": true,
      "shriek": true,
      "damianof": true,
      "balduran": true,
      "bransorem": true,
      "glebec": true,
      "nex": true,
      "leonardorb": true,
      "guiambros": true,
      "davidkassa": true,
      "noyobo": true,
      "universemaster": true,
      "ninozhang": true,
      "aslezak": true,
      "antixrist": true,
      "igorissen": true,
      "adamlu": true,
      "karlbateman": true,
      "gztomas": true,
      "clholzin": true,
      "ghalvatzakis": true,
      "kingtrocki": true,
      "shkd": true,
      "zaptun": true,
      "tza17313": true,
      "jason0518": true,
      "pstoev": true,
      "2dxgujun": true,
      "nice_body": true,
      "tarkeshwar": true,
      "fangleen": true,
      "alphatr": true,
      "flozz": true,
      "mkomigor": true,
      "edin-m": true,
      "wzbg": true,
      "yokubee": true,
      "dralc": true,
      "matiasmarani": true,
      "xngiser": true,
      "choi4450": true,
      "nanook": true,
      "demoive": true,
      "mamalat": true,
      "sinisterstuf": true,
      "leejefon": true,
      "shacoxss": true,
      "djensen47": true,
      "alanev": true,
      "pdedkov": true,
      "jalcine": true,
      "blessdyb": true,
      "vprasanth": true,
      "evan2x": true,
      "kparkov": true,
      "m0dred": true,
      "susu": true,
      "alectic": true,
      "mikemimik": true,
      "kungkk": true,
      "crazyjingling": true,
      "zfkun": true,
      "nanaotakashi": true,
      "jackchi1981": true,
      "scaffrey": true,
      "mebmc": true,
      "austencm": true,
      "hentai_mew": true,
      "perrywu": true,
      "lijunle": true,
      "cascadejs": true,
      "gonprazeres": true,
      "tylerm": true,
      "antanst": true,
      "xtiawy": true,
      "urbantumbleweed": true,
      "movever": true,
      "roxnz": true,
      "stany": true,
      "pcooney10": true,
      "isaacvitor": true,
      "xieranmaya": true,
      "clisun": true,
      "lorenzo.disidoro": true,
      "bracketdash": true,
      "andruxin": true,
      "afelicioni": true,
      "itskdk": true,
      "mmatto": true,
      "sammyteahan": true,
      "arttse": true,
      "bojand": true,
      "softwind": true,
      "kevinwan": true,
      "fabiancz": true,
      "tommyzzm": true,
      "jian263994241": true,
      "silentcloud": true,
      "zhoutk": true,
      "monjer": true,
      "lezyeoh": true,
      "hanghanghang": true,
      "alexbaumgertner": true,
      "shwaydogg": true,
      "levani": true,
      "moimikey": true,
      "nimblemachine": true,
      "eserozvataf": true,
      "superchenney": true,
      "mark12433": true,
      "jokja": true,
      "algonzo": true,
      "lvwei": true,
      "timdp": true,
      "lijinghust": true,
      "dkannan": true,
      "bradcozine": true,
      "minowu": true,
      "chown_chmod": true,
      "superhans": true,
      "magicarbon": true,
      "vamakoda": true,
      "zanner": true,
      "cfleschhut": true,
      "cashsun": true,
      "j.su": true,
      "hex20dec": true,
      "erincinci": true,
      "zechau": true,
      "ghe1219": true,
      "nicomf1982": true,
      "vutran": true,
      "coalesce": true,
      "shaomingquan": true,
      "maxidr": true,
      "honpery": true,
      "liweifeng": true,
      "spencermathews": true,
      "tscole": true,
      "parkerproject": true,
      "sternelee": true,
      "xufz": true,
      "steel1990": true,
      "iliaxone": true,
      "artjacob": true,
      "pruettti": true,
      "dmikam": true,
      "schwartzman": true,
      "preco21": true,
      "wesleyr": true,
      "jasonwang1888": true,
      "eirikbirkeland": true,
      "guim0ve": true,
      "dpjayasekara": true,
      "qmmr": true,
      "kael": true,
      "rolldance": true,
      "bluechili": true,
      "lionft": true,
      "ifeature": true,
      "jasonbourne": true,
      "qddegtya": true,
      "jtrh": true,
      "sobralia": true,
      "ions": true,
      "quocnguyen": true,
      "mrbgit": true,
      "jlucktay": true,
      "binq": true,
      "syaning": true,
      "jminnamon": true,
      "ddkothari": true,
      "sunkeyhub": true,
      "jerrywu": true,
      "dahe": true,
      "raphaelcockx": true,
      "shide": true,
      "dongguangming": true,
      "manxisuo": true,
      "vitali.doudko": true,
      "slavqa": true,
      "abhisekp": true,
      "icerainnuaa": true,
      "xalbi": true,
      "binarymax": true,
      "mark24code": true,
      "jovinbm": true,
      "pillar0514": true,
      "kkk123321": true,
      "guojiahao": true,
      "x0000ff": true,
      "kissyid": true,
      "sakthiinfotec": true,
      "riocampos": true,
      "lianhr12": true,
      "gvr37leo": true,
      "garrickajo": true,
      "waitfish": true,
      "andriecool": true,
      "a_dent": true,
      "jolg42": true,
      "yrocq": true,
      "jamesbedont": true,
      "ferrari": true,
      "azevedo": true,
      "ssljivic": true,
      "marsking": true,
      "nuer": true,
      "hibrahimsafak": true,
      "apopek": true,
      "antoor": true,
      "ohcoder": true,
      "moueza": true,
      "chrisx": true,
      "stephenhuh": true,
      "dimayak": true,
      "ggomma": true,
      "largepuma": true,
      "rebolon": true,
      "ramzesucr": true,
      "troygizzi": true,
      "qingying": true,
      "nate-river": true,
      "jacks": true,
      "mhaidarh": true,
      "davidnyhuis": true,
      "justinshea": true,
      "rhinodavid": true,
      "jorycn": true,
      "wattanar": true,
      "knoja4": true,
      "stone_breaker": true,
      "nxc": true,
      "tedyhy": true,
      "nohomey": true,
      "neo1": true,
      "webbot": true,
      "flaviomarcioti": true,
      "maziar": true,
      "huigezong": true,
      "kericw": true,
      "bradleybossard": true,
      "shangri_la": true,
      "jeffersonsouza": true,
      "lenine": true,
      "fgmnts": true,
      "xumx": true,
      "gerst20051": true,
      "paulbremer": true,
      "jon_shen": true,
      "drewigg": true,
      "zhanghao-web": true,
      "yl2014": true,
      "abdihaikal": true,
      "rylan_yan": true,
      "andyd": true,
      "foxforce": true,
      "krabello": true,
      "shakakira": true,
      "ivanempire": true,
      "babenzele": true,
      "seangenabe": true,
      "spad": true,
      "fengmiaosen": true,
      "hurerera": true,
      "jessaustin": true,
      "rocket0191": true,
      "ukrbublik": true,
      "yuch4n": true,
      "chirag8642": true,
      "akashdeep-singh": true,
      "mayq0422": true,
      "suddi": true,
      "tdmalone": true,
      "xmalinov": true,
      "porta8080": true,
      "nilz3ro": true,
      "lachriz": true,
      "aquiandres": true,
      "sopov": true,
      "awhmandan": true,
      "serge-nikitin": true,
      "jruif": true,
      "farskipper": true,
      "cthree": true,
      "fytriht": true,
      "madalozzo": true,
      "linfeng9008": true,
      "robixxu": true,
      "guzhongren": true,
      "ahme-t": true,
      "mattattaque": true,
      "yong_a": true,
      "kikna": true,
      "andr": true,
      "gurunate": true,
      "nachbar90": true,
      "vonmauser": true,
      "foxted": true,
      "junos": true,
      "shuoshubao": true,
      "pyroseza": true,
      "8code": true,
      "jaxcode": true,
      "jirqoadai": true,
      "nskondratev": true,
      "henrymcc": true,
      "toby_reynold": true,
      "nmccready": true,
      "chunhei2008": true,
      "youngluo": true,
      "wesleylhandy": true,
      "2xcvbnm": true,
      "zousandian": true,
      "tomchao": true,
      "ivan403704409": true,
      "wjp5826": true,
      "alimaster": true,
      "psibal": true,
      "kodekracker": true,
      "bvaccc": true,
      "bianlongting": true,
      "kaashin": true,
      "maalthous": true,
      "modood": true,
      "alanerzhao": true,
      "pmbenjamin": true,
      "balazserdos": true,
      "appastair": true,
      "ntl88": true,
      "tsxuehu": true,
      "binginsist": true,
      "bdfu": true,
      "pddivine": true,
      "subinvarghesein": true,
      "kevinh": true,
      "fabioper": true,
      "shadowlong": true,
      "stevenvachon": true,
      "grabantot": true,
      "phdong": true,
      "juzhiyuan": true,
      "max_devjs": true,
      "tangchr": true,
      "zhaojunlike": true,
      "herrbischoff": true,
      "gavatron": true,
      "alek-s": true,
      "larrychen": true,
      "amkaradi": true,
      "gavinning": true,
      "buru1020": true,
      "lbeff": true,
      "liangtongzhuo": true,
      "forestlake": true,
      "chiaychang": true,
      "tomekf": true,
      "manojkhannakm": true,
      "yorusi": true,
      "duxing": true,
      "hiztmine": true,
      "chinawolf_wyp": true,
      "asj1992": true,
      "davidazullo": true,
      "actionklo": true,
      "dccunni171": true,
      "abraheom": true,
      "lukvonstrom": true,
      "winfredzhu": true,
      "bplok20010": true,
      "asaupup": true,
      "d-band": true,
      "jakedemonaco": true,
      "zhenguo.zhao": true,
      "ealen": true,
      "churnpoh": true,
      "bpmccurdy": true,
      "henryheleine": true,
      "gggauravgandhi": true,
      "dwqs": true,
      "yinfxs": true,
      "fm-96": true,
      "yeming": true,
      "waldrupm": true,
      "nuwaio": true,
      "yangfan1": true,
      "adonai": true,
      "cuidapeng": true,
      "jinglf000": true,
      "stona": true,
      "jbhurruth": true,
      "imlinhanchao": true,
      "ouroboros99": true,
      "meganekick": true,
      "ecelis": true,
      "pajamasam": true,
      "legiahoang": true,
      "alexreg90": true,
      "rochejul": true,
      "petrus": true,
      "alexreg": true,
      "gamersdelight": true,
      "tianmin": true,
      "astesio": true,
      "heartnett": true,
      "ferx": true,
      "htavarez": true,
      "royliu": true,
      "manishrc": true,
      "hain": true,
      "flying-dr": true,
      "alexmercer": true,
      "grreenzz": true,
      "renz0": true,
      "hexagon6": true,
      "rubenjose75": true,
      "laoshaw": true,
      "coppy": true,
      "txmcy1993": true,
      "avivharuzi": true,
      "ashco": true,
      "sammy_winchester": true,
      "wh8766": true,
      "lamansky": true,
      "windmillboy": true,
      "losymear": true,
      "natterstefan": true,
      "ivan.marquez": true,
      "jaimegvalero": true,
      "1cr18ni9": true,
      "gingersami": true,
      "bugaga": true,
      "erk_war_han": true,
      "wujianfu": true,
      "diogocapela": true,
      "soladmd": true,
      "vghhkjh": true,
      "uxabdullah": true,
      "yonigoldberg": true
    },
    "readme": "<h1 align=\"center\">cheerio</h1>\n\n<h5 align=\"center\">Fast, flexible & lean implementation of core jQuery designed specifically for the server.</h5>\n\n<div align=\"center\">\n  <a href=\"http://travis-ci.org/cheeriojs/cheerio\">\n    <img src=\"https://secure.travis-ci.org/cheeriojs/cheerio.svg?branch=master\" alt=\"Travis CI\" />\n  </a>\n  <a href=\"https://coveralls.io/r/cheeriojs/cheerio\">\n    <img src=\"http://img.shields.io/coveralls/cheeriojs/cheerio.svg?branch=master&style=flat\" alt=\"Coverage\" />\n  </a>\n  <a href=\"https://gitter.im/cheeriojs/cheerio?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\">\n    <img src=\"https://badges.gitter.im/Join%20Chat.svg\" alt=\"Join the chat at https://gitter.im/cheeriojs/cheerio\" />\n  </a>\n  <a href=\"#backers\">\n    <img src=\"https://opencollective.com/cheerio/backers/badge.svg\" alt=\"OpenCollective backers\"/>\n  </a>\n  <a href=\"#sponsors\">\n    <img src=\"https://opencollective.com/cheerio/sponsors/badge.svg\" alt=\"OpenCollective sponsors\"/>\n  </a>\n</div>\n\n<br />\n\n```js\nconst cheerio = require('cheerio')\nconst $ = cheerio.load('<h2 class=\"title\">Hello world</h2>')\n\n$('h2.title').text('Hello there!')\n$('h2').addClass('welcome')\n\n$.html()\n//=> <html><head></head><body><h2 class=\"title welcome\">Hello there!</h2></body></html>\n```\n\n## Installation\n`npm install cheerio`\n\n## Features\n__&#10084; Familiar syntax:__\nCheerio implements a subset of core jQuery. Cheerio removes all the DOM inconsistencies and browser cruft from the jQuery library, revealing its truly gorgeous API.\n\n__&#991; Blazingly fast:__\nCheerio works with a very simple, consistent DOM model. As a result parsing, manipulating, and rendering are incredibly efficient. Preliminary end-to-end benchmarks suggest that cheerio is about __8x__ faster than JSDOM.\n\n__&#10049; Incredibly flexible:__\nCheerio wraps around [parse5](https://github.com/inikulin/parse5) parser and can optionally use @FB55's forgiving [htmlparser2](https://github.com/fb55/htmlparser2/). Cheerio can parse nearly any HTML or XML document.\n\n## Cheerio is not a web browser\n\nCheerio parses markup and provides an API for traversing/manipulating the resulting data structure. It does not interpret the result as a web browser does. Specifically, it does *not* produce a visual rendering, apply CSS, load external resources, or execute JavaScript. If your use case requires any of this functionality, you should consider projects like [PhantomJS](http://phantomjs.org/) or [JSDom](https://github.com/tmpvar/jsdom).\n\n## Job Board\n\nLooking for a career upgrade? Check out the available Node.js & Javascript positions at these innovative companies:\n\n<a href=\"https://astro.netlify.com/automattic\"><img src=\"https://astro.netlify.com/static/automattic.png\"></a>\n<a href=\"https://astro.netlify.com/segment\"><img src=\"https://astro.netlify.com/static/segment.png\"></a>\n<a href=\"https://astro.netlify.com/auth0\"><img src=\"https://astro.netlify.com/static/auth0.png\"/></a>\n\n## API\n\n### Markup example we'll be using:\n\n```html\n<ul id=\"fruits\">\n  <li class=\"apple\">Apple</li>\n  <li class=\"orange\">Orange</li>\n  <li class=\"pear\">Pear</li>\n</ul>\n```\n\nThis is the HTML markup we will be using in all of the API examples.\n\n### Loading\nFirst you need to load in the HTML. This step in jQuery is implicit, since jQuery operates on the one, baked-in DOM. With Cheerio, we need to pass in the HTML document.\n\nThis is the _preferred_ method:\n\n```js\nconst cheerio = require('cheerio');\nconst $ = cheerio.load('<ul id=\"fruits\">...</ul>');\n```\n\nOptionally, you can also load in the HTML by passing the string as the context:\n\n```js\nconst $ = require('cheerio');\n$('ul', '<ul id=\"fruits\">...</ul>');\n```\n\nOr as the root:\n\n```js\nconst $ = require('cheerio');\n$('li', 'ul', '<ul id=\"fruits\">...</ul>');\n```\n\nIf you need to modify parsing options for XML input, you may pass an extra\nobject to `.load()`:\n\n```js\nconst $ = cheerio.load('<ul id=\"fruits\">...</ul>', {\n    xml: {\n      normalizeWhitespace: true,\n    }\n});\n```\n\nThe options in the `xml` object are taken directly from [htmlparser2](https://github.com/fb55/htmlparser2/wiki/Parser-options), therefore any options that can be used in `htmlparser2` are valid in cheerio as well. The default options are:\n\n```js\n{\n    withDomLvl1: true,\n    normalizeWhitespace: false,\n    xmlMode: true,\n    decodeEntities: true\n}\n```\n\nFor a full list of options and their effects, see [this](https://github.com/fb55/DomHandler) and\n[htmlparser2's options](https://github.com/fb55/htmlparser2/wiki/Parser-options).\n\nSome users may wish to parse markup with the `htmlparser2` library, and\ntraverse/manipulate the resulting structure with Cheerio. This may be the case\nfor those upgrading from pre-1.0 releases of Cheerio (which relied on\n`htmlparser2`), for those dealing with invalid markup (because `htmlparser2` is\nmore forgiving), or for those operating in performance-critical situations\n(because `htmlparser2` may be faster in some cases). Note that \"more forgiving\"\nmeans `htmlparser2` has error-correcting mechanisms that aren't always a match\nfor the standards observed by web browsers. This behavior may be useful when\nparsing non-HTML content.\n\nTo support these cases, `load` also accepts a `htmlparser2`-compatible data\nstructure as its first argument. Users may install `htmlparser2`, use it to\nparse input, and pass the result to `load`:\n\n```js\n// Usage as of htmlparser2 version 3:\nconst htmlparser2 = require('htmlparser2');\nconst dom = htmlparser2.parseDOM(document, options);\n\nconst $ = cheerio.load(dom);\n```\n\n### Selectors\n\nCheerio's selector implementation is nearly identical to jQuery's, so the API is very similar.\n\n#### $( selector, [context], [root] )\n`selector` searches within the `context` scope which searches within the `root` scope. `selector` and `context` can be a string expression, DOM Element, array of DOM elements, or cheerio object. `root` is typically the HTML document string.\n\nThis selector method is the starting point for traversing and manipulating the document. Like jQuery, it's the primary method for selecting elements in the document, but unlike jQuery it's built on top of the CSSSelect library, which implements most of the Sizzle selectors.\n\n```js\n$('.apple', '#fruits').text()\n//=> Apple\n\n$('ul .pear').attr('class')\n//=> pear\n\n$('li[class=orange]').html()\n//=> Orange\n```\n\n### Attributes\nMethods for getting and modifying attributes.\n\n#### .attr( name, value )\nMethod for getting and setting attributes. Gets the attribute value for only the first element in the matched set. If you set an attribute's value to `null`, you remove that attribute. You may also pass a `map` and `function` like jQuery.\n\n```js\n$('ul').attr('id')\n//=> fruits\n\n$('.apple').attr('id', 'favorite').html()\n//=> <li class=\"apple\" id=\"favorite\">Apple</li>\n```\n\n> See http://api.jquery.com/attr/ for more information\n\n#### .prop( name, value )\nMethod for getting and setting properties. Gets the property value for only the first element in the matched set.\n\n```js\n$('input[type=\"checkbox\"]').prop('checked')\n//=> false\n\n$('input[type=\"checkbox\"]').prop('checked', true).val()\n//=> ok\n```\n\n> See http://api.jquery.com/prop/ for more information\n\n#### .data( name, value )\nMethod for getting and setting data attributes. Gets or sets the data attribute value for only the first element in the matched set.\n\n```js\n$('<div data-apple-color=\"red\"></div>').data()\n//=> { appleColor: 'red' }\n\n$('<div data-apple-color=\"red\"></div>').data('apple-color')\n//=> 'red'\n\nconst apple = $('.apple').data('kind', 'mac')\napple.data('kind')\n//=> 'mac'\n```\n\n> See http://api.jquery.com/data/ for more information\n\n#### .val( [value] )\nMethod for getting and setting the value of input, select, and textarea. Note: Support for `map`, and `function` has not been added yet.\n\n```js\n$('input[type=\"text\"]').val()\n//=> input_text\n\n$('input[type=\"text\"]').val('test').html()\n//=> <input type=\"text\" value=\"test\"/>\n```\n\n#### .removeAttr( name )\nMethod for removing attributes by `name`.\n\n```js\n$('.pear').removeAttr('class').html()\n//=> <li>Pear</li>\n```\n\n#### .hasClass( className )\nCheck to see if *any* of the matched elements have the given `className`.\n\n```js\n$('.pear').hasClass('pear')\n//=> true\n\n$('apple').hasClass('fruit')\n//=> false\n\n$('li').hasClass('pear')\n//=> true\n```\n\n#### .addClass( className )\nAdds class(es) to all of the matched elements. Also accepts a `function` like jQuery.\n\n```js\n$('.pear').addClass('fruit').html()\n//=> <li class=\"pear fruit\">Pear</li>\n\n$('.apple').addClass('fruit red').html()\n//=> <li class=\"apple fruit red\">Apple</li>\n```\n\n> See http://api.jquery.com/addClass/ for more information.\n\n#### .removeClass( [className] )\nRemoves one or more space-separated classes from the selected elements. If no `className` is defined, all classes will be removed. Also accepts a `function` like jQuery.\n\n```js\n$('.pear').removeClass('pear').html()\n//=> <li class=\"\">Pear</li>\n\n$('.apple').addClass('red').removeClass().html()\n//=> <li class=\"\">Apple</li>\n```\n\n> See http://api.jquery.com/removeClass/ for more information.\n\n#### .toggleClass( className, [switch] )\nAdd or remove class(es) from the matched elements, depending on either the class's presence or the value of the switch argument. Also accepts a `function` like jQuery.\n\n```js\n$('.apple.green').toggleClass('fruit green red').html()\n//=> <li class=\"apple fruit red\">Apple</li>\n\n$('.apple.green').toggleClass('fruit green red', true).html()\n//=> <li class=\"apple green fruit red\">Apple</li>\n```\n\n> See http://api.jquery.com/toggleClass/ for more information.\n\n#### .is( selector )\n#### .is( element )\n#### .is( selection )\n#### .is( function(index) )\nChecks the current list of elements and returns `true` if _any_ of the elements match the selector. If using an element or Cheerio selection, returns `true` if _any_ of the elements match. If using a predicate function, the function is executed in the context of the selected element, so `this` refers to the current element.\n\n### Forms\n\n#### .serializeArray()\n\nEncode a set of form elements as an array of names and values.\n\n```js\n$('<form><input name=\"foo\" value=\"bar\" /></form>').serializeArray()\n//=> [ { name: 'foo', value: 'bar' } ]\n```\n\n### Traversing\n\n#### .find(selector)\n#### .find(selection)\n#### .find(node)\nGet the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element.\n\n```js\n$('#fruits').find('li').length\n//=> 3\n$('#fruits').find($('.apple')).length\n//=> 1\n```\n\n#### .parent([selector])\nGet the parent of each element in the current set of matched elements, optionally filtered by a selector.\n\n```js\n$('.pear').parent().attr('id')\n//=> fruits\n```\n\n#### .parents([selector])\nGet a set of parents filtered by `selector` of each element in the current set of match elements.\n```js\n$('.orange').parents().length\n// => 2\n$('.orange').parents('#fruits').length\n// => 1\n```\n\n#### .parentsUntil([selector][,filter])\nGet the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or cheerio object.\n```js\n$('.orange').parentsUntil('#food').length\n// => 1\n```\n\n#### .closest(selector)\nFor each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.\n\n```js\n$('.orange').closest()\n// => []\n$('.orange').closest('.apple')\n// => []\n$('.orange').closest('li')\n// => [<li class=\"orange\">Orange</li>]\n$('.orange').closest('#fruits')\n// => [<ul id=\"fruits\"> ... </ul>]\n```\n\n#### .next([selector])\nGets the next sibling of the first selected element, optionally filtered by a selector.\n\n```js\n$('.apple').next().hasClass('orange')\n//=> true\n```\n\n#### .nextAll([selector])\nGets all the following siblings of the first selected element, optionally filtered by a selector.\n\n```js\n$('.apple').nextAll()\n//=> [<li class=\"orange\">Orange</li>, <li class=\"pear\">Pear</li>]\n$('.apple').nextAll('.orange')\n//=> [<li class=\"orange\">Orange</li>]\n```\n\n#### .nextUntil([selector], [filter])\nGets all the following siblings up to but not including the element matched by the selector, optionally filtered by another selector.\n\n```js\n$('.apple').nextUntil('.pear')\n//=> [<li class=\"orange\">Orange</li>]\n```\n\n#### .prev([selector])\nGets the previous sibling of the first selected element optionally filtered by a selector.\n\n```js\n$('.orange').prev().hasClass('apple')\n//=> true\n```\n\n#### .prevAll([selector])\nGets all the preceding siblings of the first selected element, optionally filtered by a selector.\n\n```js\n$('.pear').prevAll()\n//=> [<li class=\"orange\">Orange</li>, <li class=\"apple\">Apple</li>]\n$('.pear').prevAll('.orange')\n//=> [<li class=\"orange\">Orange</li>]\n```\n\n#### .prevUntil([selector], [filter])\nGets all the preceding siblings up to but not including the element matched by the selector, optionally filtered by another selector.\n\n```js\n$('.pear').prevUntil('.apple')\n//=> [<li class=\"orange\">Orange</li>]\n```\n\n#### .slice( start, [end] )\nGets the elements matching the specified range\n\n```js\n$('li').slice(1).eq(0).text()\n//=> 'Orange'\n\n$('li').slice(1, 2).length\n//=> 1\n```\n\n#### .siblings([selector])\nGets the first selected element's siblings, excluding itself.\n\n```js\n$('.pear').siblings().length\n//=> 2\n\n$('.pear').siblings('.orange').length\n//=> 1\n\n```\n\n#### .children([selector])\nGets the children of the first selected element.\n\n```js\n$('#fruits').children().length\n//=> 3\n\n$('#fruits').children('.pear').text()\n//=> Pear\n```\n\n#### .contents()\nGets the children of each element in the set of matched elements, including text and comment nodes.\n\n```js\n$('#fruits').contents().length\n//=> 3\n```\n\n#### .each( function(index, element) )\nIterates over a cheerio object, executing a function for each matched element. When the callback is fired, the function is fired in the context of the DOM element, so `this` refers to the current element, which is equivalent to the function parameter `element`. To break out of the `each` loop early, return with `false`.\n\n```js\nconst fruits = [];\n\n$('li').each(function(i, elem) {\n  fruits[i] = $(this).text();\n});\n\nfruits.join(', ');\n//=> Apple, Orange, Pear\n```\n\n#### .map( function(index, element) )\nPass each element in the current matched set through a function, producing a new Cheerio object containing the return values. The function can return an individual data item or an array of data items to be inserted into the resulting set. If an array is returned, the elements inside the array are inserted into the set. If the function returns null or undefined, no element will be inserted.\n\n```js\n$('li').map(function(i, el) {\n  // this === el\n  return $(this).text();\n}).get().join(' ');\n//=> \"apple orange pear\"\n```\n\n#### .filter( selector ) <br /> .filter( selection ) <br /> .filter( element ) <br /> .filter( function(index, element) )\n\nIterates over a cheerio object, reducing the set of selector elements to those that match the selector or pass the function's test. When a Cheerio selection is specified, return only the elements contained in that selection. When an element is specified, return only that element (if it is contained in the original selection). If using the function method, the function is executed in the context of the selected element, so `this` refers to the current element.\n\nSelector:\n\n```js\n$('li').filter('.orange').attr('class');\n//=> orange\n```\n\nFunction:\n\n```js\n$('li').filter(function(i, el) {\n  // this === el\n  return $(this).attr('class') === 'orange';\n}).attr('class')\n//=> orange\n```\n\n#### .not( selector ) <br /> .not( selection ) <br /> .not( element ) <br /> .not( function(index, elem) )\n\nRemove elements from the set of matched elements. Given a jQuery object that represents a set of DOM elements, the `.not()` method constructs a new jQuery object from a subset of the matching elements. The supplied selector is tested against each element; the elements that don't match the selector will be included in the result. The `.not()` method can take a function as its argument in the same way that `.filter()` does. Elements for which the function returns true are excluded from the filtered set; all other elements are included.\n\nSelector:\n\n```js\n$('li').not('.apple').length;\n//=> 2\n```\n\nFunction:\n\n```js\n$('li').not(function(i, el) {\n  // this === el\n  return $(this).attr('class') === 'orange';\n}).length;\n//=> 2\n```\n\n#### .has( selector ) <br /> .has( element )\n\nFilters the set of matched elements to only those which have the given DOM element as a descendant or which have a descendant that matches the given selector. Equivalent to `.filter(':has(selector)')`.\n\nSelector:\n\n```js\n$('ul').has('.pear').attr('id');\n//=> fruits\n```\n\nElement:\n\n```js\n$('ul').has($('.pear')[0]).attr('id');\n//=> fruits\n```\n\n#### .first()\nWill select the first element of a cheerio object\n\n```js\n$('#fruits').children().first().text()\n//=> Apple\n```\n\n#### .last()\nWill select the last element of a cheerio object\n\n```js\n$('#fruits').children().last().text()\n//=> Pear\n```\n\n#### .eq( i )\nReduce the set of matched elements to the one at the specified index. Use `.eq(-i)` to count backwards from the last selected element.\n\n```js\n$('li').eq(0).text()\n//=> Apple\n\n$('li').eq(-1).text()\n//=> Pear\n```\n\n#### .get( [i] )\n\nRetrieve the DOM elements matched by the Cheerio object. If an index is specified, retrieve one of the elements matched by the Cheerio object:\n\n```js\n$('li').get(0).tagName\n//=> li\n```\n\nIf no index is specified, retrieve all elements matched by the Cheerio object:\n\n```js\n$('li').get().length\n//=> 3\n```\n\n#### .index()\n#### .index( selector )\n#### .index( nodeOrSelection )\n\nSearch for a given element from among the matched elements.\n\n```js\n$('.pear').index()\n//=> 2\n$('.orange').index('li')\n//=> 1\n$('.apple').index($('#fruit, li'))\n//=> 1\n```\n\n#### .end()\nEnd the most recent filtering operation in the current chain and return the set of matched elements to its previous state.\n\n```js\n$('li').eq(0).end().length\n//=> 3\n```\n\n#### .add( selector [, context] )\n#### .add( element )\n#### .add( elements )\n#### .add( html )\n#### .add( selection )\nAdd elements to the set of matched elements.\n\n```js\n$('.apple').add('.orange').length\n//=> 2\n```\n\n#### .addBack( [filter] )\n\nAdd the previous set of elements on the stack to the current set, optionally filtered by a selector.\n\n```js\n$('li').eq(0).addBack('.orange').length\n//=> 2\n```\n\n### Manipulation\nMethods for modifying the DOM structure.\n\n#### .append( content, [content, ...] )\nInserts content as the *last* child of each of the selected elements.\n\n```js\n$('ul').append('<li class=\"plum\">Plum</li>')\n$.html()\n//=>  <ul id=\"fruits\">\n//      <li class=\"apple\">Apple</li>\n//      <li class=\"orange\">Orange</li>\n//      <li class=\"pear\">Pear</li>\n//      <li class=\"plum\">Plum</li>\n//    </ul>\n```\n\n#### .appendTo( target )\nInsert every element in the set of matched elements to the end of the target.\n\n```js\n$('<li class=\"plum\">Plum</li>').appendTo('#fruits')\n$.html()\n//=>  <ul id=\"fruits\">\n//      <li class=\"apple\">Apple</li>\n//      <li class=\"orange\">Orange</li>\n//      <li class=\"pear\">Pear</li>\n//      <li class=\"plum\">Plum</li>\n//    </ul>\n```\n\n#### .prepend( content, [content, ...] )\nInserts content as the *first* child of each of the selected elements.\n\n```js\n$('ul').prepend('<li class=\"plum\">Plum</li>')\n$.html()\n//=>  <ul id=\"fruits\">\n//      <li class=\"plum\">Plum</li>\n//      <li class=\"apple\">Apple</li>\n//      <li class=\"orange\">Orange</li>\n//      <li class=\"pear\">Pear</li>\n//    </ul>\n```\n\n#### .prependTo( target )\nInsert every element in the set of matched elements to the beginning of the target.\n\n```js\n$('<li class=\"plum\">Plum</li>').prependTo('#fruits')\n$.html()\n//=>  <ul id=\"fruits\">\n//      <li class=\"plum\">Plum</li>\n//      <li class=\"apple\">Apple</li>\n//      <li class=\"orange\">Orange</li>\n//      <li class=\"pear\">Pear</li>\n//    </ul>\n```\n\n#### .after( content, [content, ...] )\nInsert content next to each element in the set of matched elements.\n\n```js\n$('.apple').after('<li class=\"plum\">Plum</li>')\n$.html()\n//=>  <ul id=\"fruits\">\n//      <li class=\"apple\">Apple</li>\n//      <li class=\"plum\">Plum</li>\n//      <li class=\"orange\">Orange</li>\n//      <li class=\"pear\">Pear</li>\n//    </ul>\n```\n\n#### .insertAfter( target )\nInsert every element in the set of matched elements after the target.\n\n```js\n$('<li class=\"plum\">Plum</li>').insertAfter('.apple')\n$.html()\n//=>  <ul id=\"fruits\">\n//      <li class=\"apple\">Apple</li>\n//      <li class=\"plum\">Plum</li>\n//      <li class=\"orange\">Orange</li>\n//      <li class=\"pear\">Pear</li>\n//    </ul>\n```\n\n#### .before( content, [content, ...] )\nInsert content previous to each element in the set of matched elements.\n\n```js\n$('.apple').before('<li class=\"plum\">Plum</li>')\n$.html()\n//=>  <ul id=\"fruits\">\n//      <li class=\"plum\">Plum</li>\n//      <li class=\"apple\">Apple</li>\n//      <li class=\"orange\">Orange</li>\n//      <li class=\"pear\">Pear</li>\n//    </ul>\n```\n\n#### .insertBefore( target )\nInsert every element in the set of matched elements before the target.\n\n```js\n$('<li class=\"plum\">Plum</li>').insertBefore('.apple')\n$.html()\n//=>  <ul id=\"fruits\">\n//      <li class=\"plum\">Plum</li>\n//      <li class=\"apple\">Apple</li>\n//      <li class=\"orange\">Orange</li>\n//      <li class=\"pear\">Pear</li>\n//    </ul>\n```\n\n#### .remove( [selector] )\nRemoves the set of matched elements from the DOM and all their children. `selector` filters the set of matched elements to be removed.\n\n```js\n$('.pear').remove()\n$.html()\n//=>  <ul id=\"fruits\">\n//      <li class=\"apple\">Apple</li>\n//      <li class=\"orange\">Orange</li>\n//    </ul>\n```\n\n#### .replaceWith( content )\nReplaces matched elements with `content`.\n\n```js\nconst plum = $('<li class=\"plum\">Plum</li>')\n$('.pear').replaceWith(plum)\n$.html()\n//=> <ul id=\"fruits\">\n//     <li class=\"apple\">Apple</li>\n//     <li class=\"orange\">Orange</li>\n//     <li class=\"plum\">Plum</li>\n//   </ul>\n```\n\n#### .empty()\nEmpties an element, removing all its children.\n\n```js\n$('ul').empty()\n$.html()\n//=>  <ul id=\"fruits\"></ul>\n```\n\n#### .html( [htmlString] )\nGets an html content string from the first selected element. If `htmlString` is specified, each selected element's content is replaced by the new content.\n\n```js\n$('.orange').html()\n//=> Orange\n\n$('#fruits').html('<li class=\"mango\">Mango</li>').html()\n//=> <li class=\"mango\">Mango</li>\n```\n\n#### .text( [textString] )\nGet the combined text contents of each element in the set of matched elements, including their descendants. If `textString` is specified, each selected element's content is replaced by the new text content.\n\n```js\n$('.orange').text()\n//=> Orange\n\n$('ul').text()\n//=>  Apple\n//    Orange\n//    Pear\n```\n\n#### .wrap( content )\nThe .wrap() function can take any string or object that could be passed to the $() factory function to specify a DOM structure. This structure may be nested several levels deep, but should contain only one inmost element. A copy of this structure will be wrapped around each of the elements in the set of matched elements. This method returns the original set of elements for chaining purposes.\n\n```js\nconst redFruit = $('<div class=\"red-fruit\"></div>')\n$('.apple').wrap(redFruit)\n\n//=> <ul id=\"fruits\">\n//     <div class=\"red-fruit\">\n//      <li class=\"apple\">Apple</li>\n//     </div>\n//     <li class=\"orange\">Orange</li>\n//     <li class=\"plum\">Plum</li>\n//   </ul>\n\nconst healthy = $('<div class=\"healthy\"></div>')\n$('li').wrap(healthy)\n\n//=> <ul id=\"fruits\">\n//     <div class=\"healthy\">\n//       <li class=\"apple\">Apple</li>\n//     </div>\n//     <div class=\"healthy\">\n//       <li class=\"orange\">Orange</li>\n//     </div>\n//     <div class=\"healthy\">\n//        <li class=\"plum\">Plum</li>\n//     </div>\n//   </ul>\n```\n\n#### .css( [propertName] ) <br /> .css( [ propertyNames] ) <br /> .css( [propertyName], [value] ) <br /> .css( [propertName], [function] ) <br /> .css( [properties] )\n\nGet the value of a style property for the first element in the set of matched elements or set one or more CSS properties for every matched element.\n\n### Rendering\nWhen you're ready to render the document, you can use the `html` utility function:\n\n```js\n$.html()\n//=>  <ul id=\"fruits\">\n//      <li class=\"apple\">Apple</li>\n//      <li class=\"orange\">Orange</li>\n//      <li class=\"pear\">Pear</li>\n//    </ul>\n```\n\nIf you want to return the outerHTML you can use `$.html(selector)`:\n\n```js\n$.html('.pear')\n//=> <li class=\"pear\">Pear</li>\n```\n\nBy default, `html` will leave some tags open. Sometimes you may instead want to render a valid XML document. For example, you might parse the following XML snippet:\n\n```xml\nconst $ = cheerio.load('<media:thumbnail url=\"http://www.foo.com/keyframe.jpg\" width=\"75\" height=\"50\" time=\"12:05:01.123\"/>');\n```\n\n... and later want to render to XML. To do this, you can use the 'xml' utility function:\n\n```js\n$.xml()\n//=>  <media:thumbnail url=\"http://www.foo.com/keyframe.jpg\" width=\"75\" height=\"50\" time=\"12:05:01.123\"/>\n```\n\nYou may also render the text content of a Cheerio object using the `text` static method:\n\n```js\nconst $ = cheerio.load('This is <em>content</em>.')\n$.text()\n//=> This is content.\n```\n\nThe method may be called on the Cheerio module itself--be sure to pass a collection of nodes!\n\n```js\nconst $ = cheerio.load('<div>This is <em>content</em>.</div>')\ncheerio.text($('div'))\n//=> This is content.\n```\n\n### Miscellaneous\nDOM element methods that don't fit anywhere else\n\n#### .toArray()\nRetrieve all the DOM elements contained in the jQuery set as an array.\n\n```js\n$('li').toArray()\n//=> [ {...}, {...}, {...} ]\n```\n\n#### .clone() ####\nClone the cheerio object.\n\n```js\nconst moreFruit = $('#fruits').clone()\n```\n\n### Utilities\n\n#### $.root\n\nSometimes you need to work with the top-level root element. To query it, you can use `$.root()`.\n\n```js\n$.root().append('<ul id=\"vegetables\"></ul>').html();\n//=> <ul id=\"fruits\">...</ul><ul id=\"vegetables\"></ul>\n```\n\n#### $.contains( container, contained )\nChecks to see if the `contained` DOM element is a descendant of the `container` DOM element.\n\n#### $.parseHTML( data [, context ] [, keepScripts ] )\nParses a string into an array of DOM nodes. The `context` argument has no meaning for Cheerio, but it is maintained for API compatability.\n\n#### $.load( html[, options ] )\nCreate a querying function, bound to a document created from the provided markup. Note that similar to web browser contexts, this operation may introduce `<html>`, `<head>`, and `<body>` elements. See the previous section titled \"Loading\" for usage information.\n\n### Plugins\n\nOnce you have loaded a document, you may extend the prototype or the equivalent `fn` property with custom plugin methods:\n\n```js\nconst $ = cheerio.load('<html><body>Hello, <b>world</b>!</body></html>');\n$.prototype.logHtml = function() {\n  console.log(this.html());\n};\n\n$('body').logHtml(); // logs \"Hello, <b>world</b>!\" to the console\n```\n\n### The \"DOM Node\" object\n\nCheerio collections are made up of objects that bear some resemblence to [browser-based DOM nodes](https://developer.mozilla.org/en-US/docs/Web/API/Node). You can expect them to define the following properties:\n\n- `tagName`\n- `parentNode`\n- `previousSibling`\n- `nextSibling`\n- `nodeValue`\n- `firstChild`\n- `childNodes`\n- `lastChild`\n\n## Screencasts\n\nhttp://vimeo.com/31950192\n\n> This video tutorial is a follow-up to Nettut's \"How to Scrape Web Pages with Node.js and jQuery\", using cheerio instead of JSDOM + jQuery. This video shows how easy it is to use cheerio and how much faster cheerio is than JSDOM + jQuery.\n\n## Contributors\n\nThese are some of the contributors that have made cheerio possible:\n\n```\nproject  : cheerio\n repo age : 2 years, 6 months\n active   : 285 days\n commits  : 762\n files    : 36\n authors  :\n   293  Matt Mueller            38.5%\n   133  Matthew Mueller         17.5%\n    92  Mike Pennisi            12.1%\n    54  David Chambers          7.1%\n    30  kpdecker                3.9%\n    19  Felix Böhm             2.5%\n    17  fb55                    2.2%\n    15  Siddharth Mahendraker   2.0%\n    11  Adam Bretz              1.4%\n     8  Nazar Leush             1.0%\n     7  ironchefpython          0.9%\n     6  Jarno Leppänen         0.8%\n     5  Ben Sheldon             0.7%\n     5  Jos Shepherd            0.7%\n     5  Ryan Schmukler          0.7%\n     5  Steven Vachon           0.7%\n     4  Maciej Adwent           0.5%\n     4  Amir Abu Shareb         0.5%\n     3  jeremy.dentel@brandingbrand.com 0.4%\n     3  Andi Neck               0.4%\n     2  steve                   0.3%\n     2  alexbardas              0.3%\n     2  finspin                 0.3%\n     2  Ali Farhadi             0.3%\n     2  Chris Khoo              0.3%\n     2  Rob Ashton              0.3%\n     2  Thomas Heymann          0.3%\n     2  Jaro Spisak             0.3%\n     2  Dan Dascalescu          0.3%\n     2  Torstein Thune          0.3%\n     2  Wayne Larsen            0.3%\n     1  Timm Preetz             0.1%\n     1  Xavi                    0.1%\n     1  Alex Shaindlin          0.1%\n     1  mattym                  0.1%\n     1  Felix Böhm            0.1%\n     1  Farid Neshat            0.1%\n     1  Dmitry Mazuro           0.1%\n     1  Jeremy Hubble           0.1%\n     1  nevermind               0.1%\n     1  Manuel Alabor           0.1%\n     1  Matt Liegey             0.1%\n     1  Chris O'Hara            0.1%\n     1  Michael Holroyd         0.1%\n     1  Michiel De Mey          0.1%\n     1  Ben Atkin               0.1%\n     1  Rich Trott              0.1%\n     1  Rob \"Hurricane\" Ashton  0.1%\n     1  Robin Gloster           0.1%\n     1  Simon Boudrias          0.1%\n     1  Sindre Sorhus           0.1%\n     1  xiaohwan                0.1%\n```\n\n## Cheerio in the real world\n\nAre you using cheerio in production? Add it to the [wiki](https://github.com/cheeriojs/cheerio/wiki/Cheerio-in-Production)!\n\n## Testing\n\nTo run the test suite, download the repository, then within the cheerio directory, run:\n\n```shell\nmake setup\nmake test\n```\n\nThis will download the development packages and run the test suite.\n\n## Special Thanks\n\nThis library stands on the shoulders of some incredible developers. A special thanks to:\n\n__&#8226; @FB55 for node-htmlparser2 & CSSSelect:__\nFelix has a knack for writing speedy parsing engines. He completely re-wrote both @tautologistic's `node-htmlparser` and @harry's `node-soupselect` from the ground up, making both of them much faster and more flexible. Cheerio would not be possible without his foundational work\n\n__&#8226; @jQuery team for jQuery:__\nThe core API is the best of its class and despite dealing with all the browser inconsistencies the code base is extremely clean and easy to follow. Much of cheerio's implementation and documentation is from jQuery. Thanks guys.\n\n__&#8226; @visionmedia:__\nThe style, the structure, the open-source\"-ness\" of this library comes from studying TJ's style and using many of his libraries. This dude consistently pumps out high-quality libraries and has always been more than willing to help or answer questions. You rock TJ.\n\n## License\n\nMIT\n",
    "readmeFilename": "Readme.md",
    "homepage": "https://github.com/cheeriojs/cheerio#readme",
    "keywords": [
      "htmlparser",
      "jquery",
      "selector",
      "scraper",
      "parser",
      "html"
    ],
    "bugs": {
      "url": "https://github.com/cheeriojs/cheerio/issues"
    },
    "license": "MIT",
    "_attachments": {},
    "manifest": {
      "name": "cheerio",
      "version": "0.22.0",
      "description": "Tiny, fast, and elegant implementation of core jQuery designed specifically for the server",
      "author": {
        "name": "Matt Mueller",
        "email": "mattmuelle@gmail.com",
        "url": "mat.io"
      },
      "license": "MIT",
      "keywords": [
        "htmlparser",
        "jquery",
        "selector",
        "scraper",
        "parser",
        "html"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/cheeriojs/cheerio.git"
      },
      "main": "./index.js",
      "files": [
        "index.js",
        "lib"
      ],
      "engines": {
        "node": ">= 0.6"
      },
      "dependencies": {
        "css-select": "~1.2.0",
        "dom-serializer": "~0.1.0",
        "entities": "~1.1.1",
        "htmlparser2": "^3.9.1",
        "lodash.assignin": "^4.0.9",
        "lodash.bind": "^4.1.4",
        "lodash.defaults": "^4.0.1",
        "lodash.filter": "^4.4.0",
        "lodash.flatten": "^4.2.0",
        "lodash.foreach": "^4.3.0",
        "lodash.map": "^4.4.0",
        "lodash.merge": "^4.4.0",
        "lodash.pick": "^4.2.1",
        "lodash.reduce": "^4.4.0",
        "lodash.reject": "^4.4.0",
        "lodash.some": "^4.4.0"
      },
      "devDependencies": {
        "benchmark": "^2.1.0",
        "coveralls": "^2.11.9",
        "expect.js": "~0.3.1",
        "istanbul": "^0.4.3",
        "jsdom": "^9.2.1",
        "jquery": "^3.0.0",
        "jshint": "^2.9.2",
        "mocha": "^2.5.3",
        "xyz": "~0.5.0"
      },
      "scripts": {
        "test": "make test"
      },
      "gitHead": "35c4917205dca9d08139c95419e2626c0689e38a",
      "bugs": {
        "url": "https://github.com/cheeriojs/cheerio/issues"
      },
      "homepage": "https://github.com/cheeriojs/cheerio#readme",
      "_id": "cheerio@0.22.0",
      "_shasum": "a9baa860a3f9b595a6b81b1a86873121ed3a269e",
      "_from": ".",
      "_npmVersion": "3.10.6",
      "_nodeVersion": "6.2.2",
      "_npmUser": {
        "name": "mattmueller",
        "email": "mattmuelle@gmail.com"
      },
      "maintainers": [
        {
          "name": "mattmueller",
          "email": "mattmuelle@gmail.com"
        },
        {
          "name": "davidchambers",
          "email": "dc@davidchambers.me"
        },
        {
          "name": "jugglinmike",
          "email": "mike@mikepennisi.com"
        },
        {
          "name": "feedic",
          "email": "me@feedic.com"
        }
      ],
      "dist": {
        "shasum": "a9baa860a3f9b595a6b81b1a86873121ed3a269e",
        "tarball": "https://registry.npmjs.org/cheerio/-/cheerio-0.22.0.tgz"
      },
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/cheerio-0.22.0.tgz_1471954900169_0.12557715992443264"
      },
      "directories": {}
    },
    "releaseDate": "2016-08-23T12:21:40.447Z"
  },
  "sourceInfo": {
    "type": "git",
    "provider": "github",
    "url": "https://github.com/cheeriojs/cheerio",
    "revision": "49b477e7fe98b74f61f77acd06a0ef4edb5c333e",
    "path": null
  }
}