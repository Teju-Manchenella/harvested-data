{
  "_metadata": {
    "type": "npm",
    "url": "cd:/npm/npmjs/-/co/4.6.0",
    "fetchedAt": "2018-02-18T06:44:20.706Z",
    "links": {
      "self": {
        "href": "urn:npm:npmjs:-:co:revision:4.6.0:tool:clearlydescribed:1",
        "type": "resource"
      },
      "siblings": {
        "href": "urn:npm:npmjs:-:co:revision:4.6.0:tool:clearlydescribed",
        "type": "collection"
      },
      "scancode": {
        "href": "urn:npm:npmjs:-:co:revision:4.6.0:tool:scancode",
        "type": "collection"
      },
      "source": {
        "href": "urn:git:github:tj:co:revision:b54d18f8f472ad1314800e786993c4169a5ff9f8",
        "type": "resource"
      }
    },
    "version": 1,
    "processedAt": "2018-02-18T06:44:20.935Z"
  },
  "package.json": {
    "name": "co",
    "version": "4.6.0",
    "description": "generator async control flow goodness",
    "keywords": [
      "async",
      "flow",
      "generator",
      "coro",
      "coroutine"
    ],
    "devDependencies": {
      "browserify": "^10.0.0",
      "istanbul-harmony": "0",
      "mocha": "^2.0.0",
      "mz": "^1.0.2"
    },
    "scripts": {
      "test": "mocha --harmony",
      "test-cov": "node --harmony node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha -- --reporter dot",
      "test-travis": "node --harmony node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha --report lcovonly -- --reporter dot",
      "prepublish": "npm run browserify",
      "browserify": "browserify index.js -o ./co-browser.js -s co"
    },
    "files": [
      "index.js"
    ],
    "license": "MIT",
    "repository": "tj/co",
    "engines": {
      "iojs": ">= 1.0.0",
      "node": ">= 0.12.0"
    }
  },
  "registryData": {
    "_id": "co",
    "_rev": "339-aac8b45a44698a54dd521ab762981029",
    "name": "co",
    "description": "generator async control flow goodness",
    "dist-tags": {
      "latest": "4.6.0"
    },
    "readme": "# co\n\n[![Gitter][gitter-image]][gitter-url]\n[![NPM version][npm-image]][npm-url]\n[![Build status][travis-image]][travis-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n[![Downloads][downloads-image]][downloads-url]\n\n  Generator based control flow goodness for nodejs and the browser,\n  using promises, letting you write non-blocking code in a nice-ish way.\n\n## Co v4\n\n  `co@4.0.0` has been released, which now relies on promises.\n  It is a stepping stone towards [ES7 async/await](https://github.com/lukehoban/ecmascript-asyncawait).\n  The primary API change is how `co()` is invoked.\n  Before, `co` returned a \"thunk\", which you then called with a callback and optional arguments.\n  Now, `co()` returns a promise.\n\n```js\nco(function* () {\n  var result = yield Promise.resolve(true);\n  return result;\n}).then(function (value) {\n  console.log(value);\n}, function (err) {\n  console.error(err.stack);\n});\n```\n\n  If you want to convert a `co`-generator-function into a regular function that returns a promise,\n  you now use `co.wrap(fn*)`.\n\n```js\nvar fn = co.wrap(function* (val) {\n  return yield Promise.resolve(val);\n});\n\nfn(true).then(function (val) {\n\n});\n```\n\n## Platform Compatibility\n\n  `co@4+` requires a `Promise` implementation.\n  For versions of node `< 0.11` and for many older browsers,\n  you should/must include your own `Promise` polyfill.\n\n  When using node 0.11.x or greater, you must use the `--harmony-generators`\n  flag or just `--harmony` to get access to generators.\n\n  When using node 0.10.x and lower or browsers without generator support,\n  you must use [gnode](https://github.com/TooTallNate/gnode) and/or [regenerator](http://facebook.github.io/regenerator/).\n\n  io.js is supported out of the box, you can use `co` without flags or polyfills.\n\n## Installation\n\n```\n$ npm install co\n```\n\n## Associated libraries\n\nAny library that returns promises work well with `co`.\n\n- [mz](https://github.com/normalize/mz) - wrap all of node's code libraries as promises.\n\nView the [wiki](https://github.com/visionmedia/co/wiki) for more libraries.\n\n## Examples\n\n```js\nvar co = require('co');\n\nco(function *(){\n  // yield any promise\n  var result = yield Promise.resolve(true);\n}).catch(onerror);\n\nco(function *(){\n  // resolve multiple promises in parallel\n  var a = Promise.resolve(1);\n  var b = Promise.resolve(2);\n  var c = Promise.resolve(3);\n  var res = yield [a, b, c];\n  console.log(res);\n  // => [1, 2, 3]\n}).catch(onerror);\n\n// errors can be try/catched\nco(function *(){\n  try {\n    yield Promise.reject(new Error('boom'));\n  } catch (err) {\n    console.error(err.message); // \"boom\"\n }\n}).catch(onerror);\n\nfunction onerror(err) {\n  // log any uncaught errors\n  // co will not throw any errors you do not handle!!!\n  // HANDLE ALL YOUR ERRORS!!!\n  console.error(err.stack);\n}\n```\n\n## Yieldables\n\n  The `yieldable` objects currently supported are:\n\n  - promises\n  - thunks (functions)\n  - array (parallel execution)\n  - objects (parallel execution)\n  - generators (delegation)\n  - generator functions (delegation)\n\nNested `yieldable` objects are supported, meaning you can nest\npromises within objects within arrays, and so on!\n\n### Promises\n\n[Read more on promises!](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\n\n### Thunks\n\nThunks are functions that only have a single argument, a callback.\nThunk support only remains for backwards compatibility and may\nbe removed in future versions of `co`.\n\n### Arrays\n\n`yield`ing an array will resolve all the `yieldables` in parallel.\n\n```js\nco(function* () {\n  var res = yield [\n    Promise.resolve(1),\n    Promise.resolve(2),\n    Promise.resolve(3),\n  ];\n  console.log(res); // => [1, 2, 3]\n}).catch(onerror);\n```\n\n### Objects\n\nJust like arrays, objects resolve all `yieldable`s in parallel.\n\n```js\nco(function* () {\n  var res = yield {\n    1: Promise.resolve(1),\n    2: Promise.resolve(2),\n  };\n  console.log(res); // => { 1: 1, 2: 2 }\n}).catch(onerror);\n```\n\n### Generators and Generator Functions\n\nAny generator or generator function you can pass into `co`\ncan be yielded as well. This should generally be avoided\nas we should be moving towards spec-compliant `Promise`s instead.\n\n## API\n\n### co(fn*).then( val => )\n\nReturns a promise that resolves a generator, generator function,\nor any function that returns a generator.\n\n```js\nco(function* () {\n  return yield Promise.resolve(true);\n}).then(function (val) {\n  console.log(val);\n}, function (err) {\n  console.error(err.stack);\n});\n```\n\n### var fn = co.wrap(fn*)\n\nConvert a generator into a regular function that returns a `Promise`.\n\n```js\nvar fn = co.wrap(function* (val) {\n  return yield Promise.resolve(val);\n});\n\nfn(true).then(function (val) {\n\n});\n```\n\n## License\n\n  MIT\n\n[npm-image]: https://img.shields.io/npm/v/co.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/co\n[travis-image]: https://img.shields.io/travis/tj/co.svg?style=flat-square\n[travis-url]: https://travis-ci.org/tj/co\n[coveralls-image]: https://img.shields.io/coveralls/tj/co.svg?style=flat-square\n[coveralls-url]: https://coveralls.io/r/tj/co\n[downloads-image]: http://img.shields.io/npm/dm/co.svg?style=flat-square\n[downloads-url]: https://npmjs.org/package/co\n[gitter-image]: https://badges.gitter.im/Join%20Chat.svg\n[gitter-url]: https://gitter.im/tj/co?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\n",
    "maintainers": [
      {
        "name": "tjholowaychuk",
        "email": "tj@vision-media.ca"
      },
      {
        "name": "jonathanong",
        "email": "jonathanrichardong@gmail.com"
      },
      {
        "name": "jongleberry",
        "email": "jonathanrichardong@gmail.com"
      }
    ],
    "repository": {
      "type": "git",
      "url": "git+https://github.com/tj/co.git"
    },
    "users": {
      "forivall": true,
      "nickleefly": true,
      "winsonwq": true,
      "lightspeedc": true,
      "mvila": true,
      "subtlegradient": true,
      "substack": true,
      "thotjs": true,
      "kael": true,
      "qur2": true,
      "redbe4rd": true,
      "hemanth": true,
      "refack": true,
      "dexteryy": true,
      "norfish": true,
      "walmik": true,
      "wxnet": true,
      "pje": true,
      "llambda": true,
      "ikobe": true,
      "syzer": true,
      "fredsuire": true,
      "sherylynn": true,
      "icaliman": true,
      "ivangaravito": true,
      "webbushka": true,
      "standy": true,
      "magemagic": true,
      "yokubee": true,
      "marco.jahn": true,
      "zolern": true,
      "buschtoens": true,
      "adamlu": true,
      "tchcxp": true,
      "minghe": true,
      "manxisuo": true,
      "phoenix-xsy": true,
      "goodseller": true,
      "esp": true,
      "linmic": true,
      "barenko": true,
      "duanlinfei": true,
      "qqqppp9998": true,
      "rdcl": true,
      "itsnotvalid": true,
      "bransorem": true,
      "mortiy": true,
      "jpepe": true,
      "aslezak": true,
      "jueb": true,
      "edin-m": true,
      "f124275809": true,
      "freebird": true,
      "sopepos": true,
      "pensierinmusica": true,
      "lgvo": true,
      "vbv": true,
      "nashtsai": true,
      "pdedkov": true,
      "erikvold": true,
      "r3nya": true,
      "nickeljew": true,
      "cestrensem": true,
      "zetay": true,
      "kbakba": true,
      "mkany": true,
      "romanthereader": true,
      "gvhinks": true,
      "fmoliveira": true,
      "mmatto": true,
      "softwind": true,
      "mdrobny": true,
      "sasquatch": true,
      "tehdb": true,
      "kcando": true,
      "yvan": true,
      "po": true,
      "silentcloud": true,
      "makay": true,
      "jmal": true,
      "pnhung177": true,
      "hain_wang": true,
      "ahsanshafiq": true,
      "gfilip": true,
      "vutran": true,
      "raelgor": true,
      "iroc": true,
      "hyteer": true,
      "xu_q90": true,
      "sivagao": true,
      "demopark": true,
      "illbullet": true,
      "ristostevcev": true,
      "lijinghust": true,
      "shaomingquan": true,
      "shan": true,
      "hypnoglow": true,
      "surfacew": true,
      "shanewholloway": true,
      "coalesce": true,
      "jmsherry": true,
      "jkrusinski": true,
      "garustar": true,
      "rexpan": true,
      "binq": true,
      "yuji": true,
      "programmer.severson": true,
      "octetstream": true,
      "johanliebert": true,
      "zhjq19660117": true,
      "ninozhang": true,
      "antfx": true,
      "farhadi": true,
      "javascriptismagic": true,
      "soulchainer": true,
      "xrush": true,
      "boto": true,
      "novo": true,
      "james3299": true,
      "fenyot": true,
      "hain": true,
      "bapinney": true,
      "holly": true,
      "magicxiao85": true,
      "luhalvesbr": true,
      "qqcome110": true,
      "goatandsheep": true,
      "akarem": true,
      "tonyljl526": true,
      "vectorhacker": true,
      "summer": true,
      "cwagner": true,
      "freaktechnik": true,
      "gggauravgandhi": true,
      "kizzlebot": true,
      "slmcassio": true,
      "turakvlad": true,
      "aquiandres": true,
      "ridermansb": true,
      "docx": true,
      "manikantag": true,
      "subeeshcbabu": true,
      "simioni": true,
      "iori20091101": true,
      "wangnan0610": true,
      "abdul": true,
      "quafoo": true,
      "faraoman": true,
      "deparadise": true,
      "jonniespratley": true,
      "icerainnuaa": true,
      "mjurincic": true,
      "zubi": true,
      "zoluzo": true,
      "yujiikebata": true,
      "lababygirl": true,
      "jlagunas": true,
      "qddegtya": true,
      "jrthib": true,
      "xtinctspecies": true,
      "spad": true,
      "dmitr": true,
      "rsp": true,
      "isenricho": true,
      "shuoshubao": true,
      "panlw": true,
      "leonzhao": true,
      "farskipper": true,
      "ab.moon": true,
      "danielye": true,
      "n0mad01": true,
      "aprilchen": true,
      "jirqoadai": true,
      "mobeicaoyuan": true,
      "kaufmo": true,
      "grumpycat": true,
      "wfalkwallace": true,
      "fantasy": true,
      "elussich": true,
      "garenyondem": true,
      "dyyz993": true,
      "kodekracker": true,
      "sadmansamee": true,
      "pnolasco": true,
      "sternelee": true,
      "mattattaque": true,
      "buru1020": true,
      "modood": true,
      "ferchoriverar": true,
      "fanyegong": true,
      "dpjayasekara": true,
      "pixel67": true,
      "hecto932": true,
      "mikedamage": true,
      "darkwinter": true,
      "terrychan": true,
      "stone-jin": true,
      "arnoldask": true,
      "cloud_swing": true,
      "stone_breaker": true,
      "liqiang0335": true,
      "bianlongting": true,
      "hoanganh25991": true,
      "nauhil": true,
      "wozhizui": true,
      "jasonzhouu": true,
      "techfe": true,
      "d-band": true,
      "vinbhatt": true,
      "superchenney": true,
      "iceriver2": true,
      "shushanfx": true,
      "iamninad": true,
      "andifeind": true,
      "xkr47": true,
      "anker": true,
      "vickykoblinski": true,
      "alexmercer": true,
      "luckyulin": true,
      "jprempeh": true,
      "subchen": true,
      "leonstill": true,
      "ganeshkbhat": true,
      "monjer": true,
      "sammy_winchester": true,
      "avivharuzi": true,
      "wisetc": true,
      "sunhua": true,
      "zhangaz1": true
    },
    "readmeFilename": "Readme.md",
    "homepage": "https://github.com/tj/co#readme",
    "keywords": [
      "async",
      "flow",
      "generator",
      "coro",
      "coroutine"
    ],
    "bugs": {
      "url": "https://github.com/tj/co/issues"
    },
    "license": "MIT",
    "_attachments": {},
    "manifest": {
      "name": "co",
      "version": "4.6.0",
      "description": "generator async control flow goodness",
      "keywords": [
        "async",
        "flow",
        "generator",
        "coro",
        "coroutine"
      ],
      "devDependencies": {
        "browserify": "^10.0.0",
        "istanbul-harmony": "0",
        "mocha": "^2.0.0",
        "mz": "^1.0.2"
      },
      "scripts": {
        "test": "mocha --harmony",
        "test-cov": "node --harmony node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha -- --reporter dot",
        "test-travis": "node --harmony node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha --report lcovonly -- --reporter dot",
        "prepublish": "npm run browserify",
        "browserify": "browserify index.js -o ./co-browser.js -s co"
      },
      "files": [
        "index.js"
      ],
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/tj/co.git"
      },
      "engines": {
        "iojs": ">= 1.0.0",
        "node": ">= 0.12.0"
      },
      "gitHead": "b54d18f8f472ad1314800e786993c4169a5ff9f8",
      "bugs": {
        "url": "https://github.com/tj/co/issues"
      },
      "homepage": "https://github.com/tj/co#readme",
      "_id": "co@4.6.0",
      "_shasum": "6ea6bdf3d853ae54ccb8e47bfa0bf3f9031fb184",
      "_from": ".",
      "_npmVersion": "2.11.3",
      "_nodeVersion": "2.3.3",
      "_npmUser": {
        "name": "jongleberry",
        "email": "jonathanrichardong@gmail.com"
      },
      "maintainers": [
        {
          "name": "tjholowaychuk",
          "email": "tj@vision-media.ca"
        },
        {
          "name": "jonathanong",
          "email": "jonathanrichardong@gmail.com"
        },
        {
          "name": "jongleberry",
          "email": "jonathanrichardong@gmail.com"
        }
      ],
      "dist": {
        "shasum": "6ea6bdf3d853ae54ccb8e47bfa0bf3f9031fb184",
        "tarball": "https://registry.npmjs.org/co/-/co-4.6.0.tgz"
      },
      "directories": {}
    },
    "releaseDate": "2015-07-09T22:30:44.562Z"
  },
  "sourceInfo": {
    "type": "git",
    "provider": "github",
    "url": "https://github.com/tj/co",
    "revision": "b54d18f8f472ad1314800e786993c4169a5ff9f8",
    "path": null
  }
}