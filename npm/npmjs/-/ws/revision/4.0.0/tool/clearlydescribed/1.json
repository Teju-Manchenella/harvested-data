{
  "_metadata": {
    "type": "npm",
    "url": "cd:/npm/npmjs/-/ws/4.0.0",
    "fetchedAt": "2018-02-18T06:44:34.213Z",
    "links": {
      "self": {
        "href": "urn:npm:npmjs:-:ws:revision:4.0.0:tool:clearlydescribed:1",
        "type": "resource"
      },
      "siblings": {
        "href": "urn:npm:npmjs:-:ws:revision:4.0.0:tool:clearlydescribed",
        "type": "collection"
      },
      "scancode": {
        "href": "urn:npm:npmjs:-:ws:revision:4.0.0:tool:scancode",
        "type": "collection"
      },
      "source": {
        "href": "urn:git:github:websockets:ws:revision:a04d9855a5a3d9bab62f9d22bcf5d1ee8185726b",
        "type": "resource"
      }
    },
    "version": 1,
    "processedAt": "2018-02-18T06:44:34.522Z"
  },
  "package.json": {
    "name": "ws",
    "version": "4.0.0",
    "description": "Simple to use, blazing fast and thoroughly tested websocket client and server for Node.js",
    "keywords": [
      "HyBi",
      "Push",
      "RFC-6455",
      "WebSocket",
      "WebSockets",
      "real-time"
    ],
    "homepage": "https://github.com/websockets/ws",
    "bugs": "https://github.com/websockets/ws/issues",
    "repository": "websockets/ws",
    "author": "Einar Otto Stangvik <einaros@gmail.com> (http://2x.io)",
    "license": "MIT",
    "main": "index.js",
    "files": [
      "index.js",
      "lib"
    ],
    "scripts": {
      "test": "eslint . && nyc --reporter=html --reporter=text mocha test/*.test.js",
      "integration": "eslint . && mocha test/*.integration.js",
      "lint": "eslint ."
    },
    "dependencies": {
      "async-limiter": "~1.0.0",
      "safe-buffer": "~5.1.0",
      "ultron": "~1.1.0"
    },
    "devDependencies": {
      "benchmark": "~2.1.2",
      "bufferutil": "~3.0.0",
      "eslint": "~4.14.0",
      "eslint-config-standard": "~10.2.0",
      "eslint-plugin-import": "~2.8.0",
      "eslint-plugin-node": "~5.2.0",
      "eslint-plugin-promise": "~3.6.0",
      "eslint-plugin-standard": "~3.0.0",
      "mocha": "~4.1.0",
      "nyc": "~11.4.1",
      "utf-8-validate": "~4.0.0"
    }
  },
  "registryData": {
    "_id": "ws",
    "_rev": "538-3d5877abf3a51244a88fb312fdd222bb",
    "name": "ws",
    "description": "Simple to use, blazing fast and thoroughly tested websocket client and server for Node.js",
    "dist-tags": {
      "latest": "4.0.0"
    },
    "readme": "# ws: a Node.js WebSocket library\n\n[![Version npm](https://img.shields.io/npm/v/ws.svg)](https://www.npmjs.com/package/ws)\n[![Linux Build](https://img.shields.io/travis/websockets/ws/master.svg)](https://travis-ci.org/websockets/ws)\n[![Windows Build](https://ci.appveyor.com/api/projects/status/github/websockets/ws?branch=master&svg=true)](https://ci.appveyor.com/project/lpinca/ws)\n[![Coverage Status](https://img.shields.io/coveralls/websockets/ws/master.svg)](https://coveralls.io/r/websockets/ws?branch=master)\n\nws is a simple to use, blazing fast, and thoroughly tested WebSocket client\nand server implementation.\n\nPasses the quite extensive Autobahn test suite: [server][server-report],\n[client][client-report].\n\n**Note**: This module does not work in the browser. The client in the docs is a\nreference to a back end with the role of a client in the WebSocket\ncommunication. Browser clients must use the native\n[`WebSocket`](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket) object.\n\n## Table of Contents\n\n* [Protocol support](#protocol-support)\n* [Installing](#installing)\n  + [Opt-in for performance and spec compliance](#opt-in-for-performance-and-spec-compliance)\n* [API docs](#api-docs)\n* [WebSocket compression](#websocket-compression)\n* [Usage examples](#usage-examples)\n  + [Sending and receiving text data](#sending-and-receiving-text-data)\n  + [Sending binary data](#sending-binary-data)\n  + [Server example](#server-example)\n  + [Broadcast example](#broadcast-example)\n  + [ExpressJS example](#expressjs-example)\n  + [echo.websocket.org demo](#echowebsocketorg-demo)\n  + [Other examples](#other-examples)\n* [Error handling best practices](#error-handling-best-practices)\n* [FAQ](#faq)\n  + [How to get the IP address of the client?](#how-to-get-the-ip-address-of-the-client)\n  + [How to detect and close broken connections?](#how-to-detect-and-close-broken-connections)\n  + [How to connect via a proxy?](#how-to-connect-via-a-proxy)\n* [Changelog](#changelog)\n* [License](#license)\n\n## Protocol support\n\n* **HyBi drafts 07-12** (Use the option `protocolVersion: 8`)\n* **HyBi drafts 13-17** (Current default, alternatively option `protocolVersion: 13`)\n\n## Installing\n\n```\nnpm install --save ws\n```\n\n### Opt-in for performance and spec compliance\n\nThere are 2 optional modules that can be installed along side with the ws\nmodule. These modules are binary addons which improve certain operations.\nPrebuilt binaries are available for the most popular platforms so you don't\nnecessarily need to have a C++ compiler installed on your machine.\n\n- `npm install --save-optional bufferutil`: Allows to efficiently perform\n  operations such as masking and unmasking the data payload of the WebSocket\n  frames.\n- `npm install --save-optional utf-8-validate`: Allows to efficiently check\n  if a message contains valid UTF-8 as required by the spec.\n\n## API docs\n\nSee [`/doc/ws.md`](./doc/ws.md) for Node.js-like docs for the ws classes.\n\n## WebSocket compression\n\nws supports the [permessage-deflate extension][permessage-deflate] which\nenables the client and server to negotiate a compression algorithm and its\nparameters, and then selectively apply it to the data payloads of each\nWebSocket message.\n\nThe extension is disabled by default on the server and enabled by default on\nthe client. It adds a significant overhead in terms of performance and memory\nconsumption so we suggest to enable it only if it is really needed.\n\nThe client will only use the extension if it is supported and enabled on the\nserver. To always disable the extension on the client set the\n`perMessageDeflate` option to `false`.\n\n```js\nconst WebSocket = require('ws');\n\nconst ws = new WebSocket('ws://www.host.com/path', {\n  perMessageDeflate: false\n});\n```\n\n## Usage examples\n\n### Sending and receiving text data\n\n```js\nconst WebSocket = require('ws');\n\nconst ws = new WebSocket('ws://www.host.com/path');\n\nws.on('open', function open() {\n  ws.send('something');\n});\n\nws.on('message', function incoming(data) {\n  console.log(data);\n});\n```\n\n### Sending binary data\n\n```js\nconst WebSocket = require('ws');\n\nconst ws = new WebSocket('ws://www.host.com/path');\n\nws.on('open', function open() {\n  const array = new Float32Array(5);\n\n  for (var i = 0; i < array.length; ++i) {\n    array[i] = i / 2;\n  }\n\n  ws.send(array);\n});\n```\n\n### Server example\n\n```js\nconst WebSocket = require('ws');\n\nconst wss = new WebSocket.Server({ port: 8080 });\n\nwss.on('connection', function connection(ws) {\n  ws.on('message', function incoming(message) {\n    console.log('received: %s', message);\n  });\n\n  ws.send('something');\n});\n```\n\n### Broadcast example\n\n```js\nconst WebSocket = require('ws');\n\nconst wss = new WebSocket.Server({ port: 8080 });\n\n// Broadcast to all.\nwss.broadcast = function broadcast(data) {\n  wss.clients.forEach(function each(client) {\n    if (client.readyState === WebSocket.OPEN) {\n      client.send(data);\n    }\n  });\n};\n\nwss.on('connection', function connection(ws) {\n  ws.on('message', function incoming(data) {\n    // Broadcast to everyone else.\n    wss.clients.forEach(function each(client) {\n      if (client !== ws && client.readyState === WebSocket.OPEN) {\n        client.send(data);\n      }\n    });\n  });\n});\n```\n\n### ExpressJS example\n\n```js\nconst express = require('express');\nconst http = require('http');\nconst url = require('url');\nconst WebSocket = require('ws');\n\nconst app = express();\n\napp.use(function (req, res) {\n  res.send({ msg: \"hello\" });\n});\n\nconst server = http.createServer(app);\nconst wss = new WebSocket.Server({ server });\n\nwss.on('connection', function connection(ws, req) {\n  const location = url.parse(req.url, true);\n  // You might use location.query.access_token to authenticate or share sessions\n  // or req.headers.cookie (see http://stackoverflow.com/a/16395220/151312)\n\n  ws.on('message', function incoming(message) {\n    console.log('received: %s', message);\n  });\n\n  ws.send('something');\n});\n\nserver.listen(8080, function listening() {\n  console.log('Listening on %d', server.address().port);\n});\n```\n\n### echo.websocket.org demo\n\n```js\nconst WebSocket = require('ws');\n\nconst ws = new WebSocket('wss://echo.websocket.org/', {\n  origin: 'https://websocket.org'\n});\n\nws.on('open', function open() {\n  console.log('connected');\n  ws.send(Date.now());\n});\n\nws.on('close', function close() {\n  console.log('disconnected');\n});\n\nws.on('message', function incoming(data) {\n  console.log(`Roundtrip time: ${Date.now() - data} ms`);\n\n  setTimeout(function timeout() {\n    ws.send(Date.now());\n  }, 500);\n});\n```\n\n### Other examples\n\nFor a full example with a browser client communicating with a ws server, see the\nexamples folder.\n\nOtherwise, see the test cases.\n\n## Error handling best practices\n\n```js\n// If the WebSocket is closed before the following send is attempted\nws.send('something');\n\n// Errors (both immediate and async write errors) can be detected in an optional\n// callback. The callback is also the only way of being notified that data has\n// actually been sent.\nws.send('something', function ack(error) {\n  // If error is not defined, the send has been completed, otherwise the error\n  // object will indicate what failed.\n});\n\n// Immediate errors can also be handled with `try...catch`, but **note** that\n// since sends are inherently asynchronous, socket write failures will *not* be\n// captured when this technique is used.\ntry { ws.send('something'); }\ncatch (e) { /* handle error */ }\n```\n\n## FAQ\n\n### How to get the IP address of the client?\n\nThe remote IP address can be obtained from the raw socket.\n\n```js\nconst WebSocket = require('ws');\n\nconst wss = new WebSocket.Server({ port: 8080 });\n\nwss.on('connection', function connection(ws, req) {\n  const ip = req.connection.remoteAddress;\n});\n```\n\nWhen the server runs behind a proxy like NGINX, the de-facto standard is to use\nthe `X-Forwarded-For` header.\n\n```js\nwss.on('connection', function connection(ws, req) {\n  const ip = req.headers['x-forwarded-for'];\n});\n```\n\n### How to detect and close broken connections?\n\nSometimes the link between the server and the client can be interrupted in a\nway that keeps both the server and the client unaware of the broken state of the\nconnection (e.g. when pulling the cord).\n\nIn these cases ping messages can be used as a means to verify that the remote\nendpoint is still responsive.\n\n```js\nconst WebSocket = require('ws');\n\nconst wss = new WebSocket.Server({ port: 8080 });\n\nfunction noop() {}\n\nfunction heartbeat() {\n  this.isAlive = true;\n}\n\nwss.on('connection', function connection(ws) {\n  ws.isAlive = true;\n  ws.on('pong', heartbeat);\n});\n\nconst interval = setInterval(function ping() {\n  wss.clients.forEach(function each(ws) {\n    if (ws.isAlive === false) return ws.terminate();\n\n    ws.isAlive = false;\n    ws.ping(noop);\n  });\n}, 30000);\n```\n\nPong messages are automatically sent in response to ping messages as required\nby the spec.\n\n### How to connect via a proxy?\n\nUse a custom `http.Agent` implementation like [https-proxy-agent][] or\n[socks-proxy-agent][].\n\n## Changelog\n\nWe're using the GitHub [releases][changelog] for changelog entries.\n\n## License\n\n[MIT](LICENSE)\n\n[https-proxy-agent]: https://github.com/TooTallNate/node-https-proxy-agent\n[socks-proxy-agent]: https://github.com/TooTallNate/node-socks-proxy-agent\n[client-report]: http://websockets.github.io/ws/autobahn/clients/\n[server-report]: http://websockets.github.io/ws/autobahn/servers/\n[permessage-deflate]: https://tools.ietf.org/html/rfc7692\n[changelog]: https://github.com/websockets/ws/releases\n",
    "maintainers": [
      {
        "email": "luigipinca@gmail.com",
        "name": "lpinca"
      },
      {
        "email": "npm@3rd-Eden.com",
        "name": "v1"
      },
      {
        "email": "npm@3rd-Eden.com",
        "name": "3rdeden"
      },
      {
        "email": "einaros@gmail.com",
        "name": "einaros"
      }
    ],
    "author": {
      "name": "Einar Otto Stangvik",
      "email": "einaros@gmail.com",
      "url": "http://2x.io"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/websockets/ws.git"
    },
    "users": {
      "fgribreau": true,
      "luk": true,
      "maxmaximov": true,
      "romac": true,
      "kastor": true,
      "tjholowaychuk": true,
      "V1": true,
      "zarkone": true,
      "jamescostian": true,
      "jpillora": true,
      "wouldgo": true,
      "zeusdeux": true,
      "piascikj": true,
      "funroll": true,
      "gabeio": true,
      "juriwiens": true,
      "bfattori": true,
      "abalandin": true,
      "kahboom": true,
      "h02e56": true,
      "abarroso": true,
      "henrytseng": true,
      "zlatip": true,
      "eventhorizon": true,
      "esundahl": true,
      "genediazjr": true,
      "ivangaravito": true,
      "lewisbrown": true,
      "mihaiv": true,
      "superjoe": true,
      "paulferrett": true,
      "pickledonion": true,
      "gigerlin": true,
      "gazilla": true,
      "mygoare": true,
      "yunxao": true,
      "nguru": true,
      "frknbasaran": true,
      "kenlimmj": true,
      "sunnylost": true,
      "reergymerej": true,
      "suprsidr": true,
      "kermit666": true,
      "prabhash1785": true,
      "sahilsk": true,
      "gchudnov": true,
      "dudley": true,
      "from-nibly": true,
      "huytard": true,
      "hollobit": true,
      "amirmehmood": true,
      "ajk": true,
      "clhynfield": true,
      "dongxu": true,
      "justintormey": true,
      "ph3nx": true,
      "shmeeny": true,
      "hitesh": true,
      "jonlailam": true,
      "ezcabrera": true,
      "ne_sachirou": true,
      "kreshikhin": true,
      "maysay": true,
      "ivansky": true,
      "ckross01": true,
      "blitzprog": true,
      "phoenix-xsy": true,
      "vladan": true,
      "guananddu": true,
      "oneapm.com": true,
      "io2work": true,
      "santihbc": true,
      "barenko": true,
      "valeriu-zdrobau": true,
      "mktj": true,
      "ioncreature": true,
      "chalker": true,
      "pensierinmusica": true,
      "maxidr": true,
      "doruk": true,
      "alectic": true,
      "tcrowe": true,
      "galenandrew": true,
      "bobjohnson23": true,
      "philliphenslee": true,
      "brave_cgx": true,
      "fatelei": true,
      "jonabasque": true,
      "jhohlfeld": true,
      "maxwang": true,
      "antanst": true,
      "stany": true,
      "raisiqueira": true,
      "sobear": true,
      "saru95": true,
      "jesusgoku": true,
      "animustechnology": true,
      "webnicola": true,
      "sirrah": true,
      "bret": true,
      "brettv": true,
      "chimit": true,
      "guardsystems": true,
      "hyteer": true,
      "felixmcfelix": true,
      "xxsnake28": true,
      "segen": true,
      "xinwangwang": true,
      "loselovegirl": true,
      "koskokos": true,
      "bcoe": true,
      "shan": true,
      "hengkiardo": true,
      "donvercety": true,
      "dimonfox": true,
      "vbv": true,
      "deemsk": true,
      "emarcs": true,
      "snarky": true,
      "quocnguyen": true,
      "andygreenegrass": true,
      "maziar": true,
      "jhuckaby": true,
      "itsjimi": true,
      "danielbankhead": true,
      "cestrensem": true,
      "farhadi": true,
      "dkblay": true,
      "arkanciscan": true,
      "f124275809": true,
      "x0000ff": true,
      "behajian": true,
      "nickleefly": true,
      "nickeltobias": true,
      "shakakira": true,
      "akarem": true,
      "apopek": true,
      "djviolin": true,
      "ronin161": true,
      "rocket0191": true,
      "ifeature": true,
      "diegorbaquero": true,
      "writech": true,
      "clemo": true,
      "jez9999": true,
      "mr-smiley": true,
      "pablo.tavarez": true,
      "dofy": true,
      "jerrywu": true,
      "mojaray2k": true,
      "magicmind": true,
      "dankle": true,
      "mo2c": true,
      "psychollama": true,
      "blunt1337": true,
      "broofa": true,
      "yujiikebata": true,
      "frankg": true,
      "suncn": true,
      "sharper": true,
      "nilz3ro": true,
      "seangenabe": true,
      "hain": true,
      "anoubis": true,
      "da5atar": true,
      "volodymyr.sichka": true,
      "thomas.miele": true,
      "largepuma": true,
      "satoru": true,
      "suemcnab": true,
      "ukrbublik": true,
      "metakermit": true,
      "ww522413622": true,
      "makediff": true,
      "mseminatore": true,
      "shaomingquan": true,
      "sopov": true,
      "bigglesatlarge": true,
      "tonyleen": true,
      "tsxuehu": true,
      "rochejul": true,
      "scott.m.sarsfield": true,
      "chinawolf_wyp": true,
      "antitim": true,
      "jasonwang1888": true,
      "conantonakos": true,
      "raojs": true,
      "heartnett": true,
      "scottfreecode": true,
      "e23jiang": true,
      "danielpavelic": true,
      "restmount": true,
      "mechanicalhuman": true,
      "pddivine": true,
      "windyh": true,
      "gvr37leo": true,
      "mdrobny": true,
      "sekwah41": true,
      "wozhizui": true,
      "npmrud5g": true,
      "onsentamago": true,
      "sethbergman": true,
      "shanewholloway": true,
      "tangweikun": true,
      "leggiero": true,
      "xfloops": true,
      "nestfall": true,
      "travis346": true,
      "appastair": true,
      "zhenguo.zhao": true,
      "zalithka": true,
      "kss": true,
      "johnsmithcoder": true,
      "masayuki": true,
      "yangzw": true,
      "meeh": true,
      "pajamasam": true,
      "laklin": true,
      "smituk": true,
      "joe.li": true,
      "serge-nikitin": true,
      "ethan_": true,
      "tomitoivio": true,
      "bagpommy": true,
      "ctaggart": true,
      "alikadir": true,
      "enhezzz": true,
      "huangssssx": true,
      "adaliszk": true,
      "hanhq": true,
      "dwqs": true,
      "liigo": true,
      "456wyc": true,
      "71emj1": true,
      "anudeepakumar": true,
      "taseenb": true,
      "jimknopf": true,
      "losymear": true,
      "nunogee": true,
      "garenyondem": true,
      "tondy67": true,
      "1cr18ni9": true,
      "kamikadze4game": true,
      "shawnt22": true,
      "horrorandtropics": true,
      "korekara88730": true,
      "maxorelus": true
    },
    "keywords": [
      "HyBi",
      "Push",
      "RFC-6455",
      "WebSocket",
      "WebSockets",
      "real-time"
    ],
    "bugs": {
      "url": "https://github.com/websockets/ws/issues"
    },
    "readmeFilename": "README.md",
    "homepage": "https://github.com/websockets/ws",
    "license": "MIT",
    "_attachments": {},
    "manifest": {
      "name": "ws",
      "version": "4.0.0",
      "description": "Simple to use, blazing fast and thoroughly tested websocket client and server for Node.js",
      "keywords": [
        "HyBi",
        "Push",
        "RFC-6455",
        "WebSocket",
        "WebSockets",
        "real-time"
      ],
      "homepage": "https://github.com/websockets/ws",
      "bugs": {
        "url": "https://github.com/websockets/ws/issues"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/websockets/ws.git"
      },
      "author": {
        "name": "Einar Otto Stangvik",
        "email": "einaros@gmail.com",
        "url": "http://2x.io"
      },
      "license": "MIT",
      "main": "index.js",
      "files": [
        "index.js",
        "lib"
      ],
      "scripts": {
        "test": "eslint . && nyc --reporter=html --reporter=text mocha test/*.test.js",
        "integration": "eslint . && mocha test/*.integration.js",
        "lint": "eslint ."
      },
      "dependencies": {
        "async-limiter": "~1.0.0",
        "safe-buffer": "~5.1.0",
        "ultron": "~1.1.0"
      },
      "devDependencies": {
        "benchmark": "~2.1.2",
        "bufferutil": "~3.0.0",
        "eslint": "~4.14.0",
        "eslint-config-standard": "~10.2.0",
        "eslint-plugin-import": "~2.8.0",
        "eslint-plugin-node": "~5.2.0",
        "eslint-plugin-promise": "~3.6.0",
        "eslint-plugin-standard": "~3.0.0",
        "mocha": "~4.1.0",
        "nyc": "~11.4.1",
        "utf-8-validate": "~4.0.0"
      },
      "gitHead": "a04d9855a5a3d9bab62f9d22bcf5d1ee8185726b",
      "_id": "ws@4.0.0",
      "_npmVersion": "5.6.0",
      "_nodeVersion": "9.3.0",
      "_npmUser": {
        "name": "lpinca",
        "email": "luigipinca@gmail.com"
      },
      "dist": {
        "integrity": "sha512-QYslsH44bH8O7/W2815u5DpnCpXWpEK44FmaHffNwgJI4JMaSZONgPBTOfrxJ29mXKbXak+LsJ2uAkDTYq2ptQ==",
        "shasum": "bfe1da4c08eeb9780b986e0e4d10eccd7345999f",
        "tarball": "https://registry.npmjs.org/ws/-/ws-4.0.0.tgz"
      },
      "maintainers": [
        {
          "email": "luigipinca@gmail.com",
          "name": "lpinca"
        },
        {
          "email": "npm@3rd-Eden.com",
          "name": "v1"
        },
        {
          "email": "npm@3rd-Eden.com",
          "name": "3rdeden"
        },
        {
          "email": "einaros@gmail.com",
          "name": "einaros"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ws-4.0.0.tgz_1515146653954_0.1453788885846734"
      },
      "directories": {}
    },
    "releaseDate": "2018-01-05T10:04:15.095Z"
  },
  "sourceInfo": {
    "type": "git",
    "provider": "github",
    "url": "https://github.com/websockets/ws",
    "revision": "a04d9855a5a3d9bab62f9d22bcf5d1ee8185726b",
    "path": null
  }
}