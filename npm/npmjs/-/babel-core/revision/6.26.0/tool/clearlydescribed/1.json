{
  "_metadata": {
    "type": "npm",
    "url": "cd:/npm/npmjs/-/babel-core/6.26.0",
    "fetchedAt": "2018-02-17T19:33:03.906Z",
    "links": {
      "self": {
        "href": "urn:npm:npmjs:-:babel-core:revision:6.26.0:tool:clearlydescribed:1",
        "type": "resource"
      },
      "siblings": {
        "href": "urn:npm:npmjs:-:babel-core:revision:6.26.0",
        "type": "collection"
      },
      "scancode": {
        "href": "urn:npm:npmjs:-:babel-core:revision:6.26.0:tool:scancode",
        "type": "collection"
      },
      "source": {
        "href": "urn:git:github:babel:babel:revision:ddebc2bfc42fd92ffb09114682a0f7f1d8713f06",
        "type": "resource"
      }
    },
    "version": 1,
    "processedAt": "2018-02-17T19:33:04.400Z"
  },
  "package.json": {
    "name": "babel-core",
    "version": "6.26.0",
    "description": "Babel compiler core.",
    "author": "Sebastian McKenzie <sebmck@gmail.com>",
    "homepage": "https://babeljs.io/",
    "license": "MIT",
    "repository": "https://github.com/babel/babel/tree/master/packages/babel-core",
    "keywords": [
      "6to5",
      "babel",
      "classes",
      "const",
      "es6",
      "harmony",
      "let",
      "modules",
      "transpile",
      "transpiler",
      "var",
      "babel-core",
      "compiler"
    ],
    "scripts": {
      "bench": "make bench",
      "test": "make test"
    },
    "dependencies": {
      "babel-code-frame": "^6.26.0",
      "babel-generator": "^6.26.0",
      "babel-helpers": "^6.24.1",
      "babel-messages": "^6.23.0",
      "babel-register": "^6.26.0",
      "babel-runtime": "^6.26.0",
      "babel-template": "^6.26.0",
      "babel-traverse": "^6.26.0",
      "babel-types": "^6.26.0",
      "babylon": "^6.18.0",
      "convert-source-map": "^1.5.0",
      "debug": "^2.6.8",
      "json5": "^0.5.1",
      "lodash": "^4.17.4",
      "minimatch": "^3.0.4",
      "path-is-absolute": "^1.0.1",
      "private": "^0.1.7",
      "slash": "^1.0.0",
      "source-map": "^0.5.6"
    },
    "devDependencies": {
      "babel-helper-fixtures": "^6.26.0",
      "babel-helper-transform-fixture-test-runner": "^6.26.0",
      "babel-polyfill": "^6.26.0"
    }
  },
  "registryData": {
    "_id": "babel-core",
    "_rev": "613-66646d0576ee5434bbef9ef7a867c376",
    "name": "babel-core",
    "description": "Babel compiler core.",
    "dist-tags": {
      "latest": "6.26.0",
      "old": "5.8.38",
      "next": "7.0.0-beta.3",
      "bridge": "7.0.0-bridge.0"
    },
    "readme": "# babel-core\n\n> Babel compiler core.\n\n\n```javascript\nvar babel = require(\"babel-core\");\nimport { transform } from 'babel-core';\nimport * as babel from 'babel-core';\n```\n\nAll transformations will use your local configuration files (.babelrc or in package.json). See [options](#options) to disable it.\n\n## babel.transform(code: string, [options?](#options): Object)\n\nTransforms the passed in `code`. Returning an object with the generated code,\nsource map, and AST.\n\n```js\nbabel.transform(code, options) // => { code, map, ast }\n```\n\n**Example**\n\n```js\nvar result = babel.transform(\"code();\", options);\nresult.code;\nresult.map;\nresult.ast;\n```\n\n## babel.transformFile(filename: string, [options?](#options): Object, callback: Function)\n\nAsynchronously transforms the entire contents of a file.\n\n```js\nbabel.transformFile(filename, options, callback)\n```\n\n**Example**\n\n```js\nbabel.transformFile(\"filename.js\", options, function (err, result) {\n  result; // => { code, map, ast }\n});\n```\n\n## babel.transformFileSync(filename: string, [options?](#options): Object)\n\nSynchronous version of `babel.transformFile`. Returns the transformed contents of\nthe `filename`.\n\n```js\nbabel.transformFileSync(filename, options) // => { code, map, ast }\n```\n\n**Example**\n\n```js\nbabel.transformFileSync(\"filename.js\", options).code;\n```\n\n## babel.transformFromAst(ast: Object, code?: string, [options?](#options): Object)\n\nGiven, an [AST](https://astexplorer.net/), transform it.\n\n```js\nconst code = \"if (true) return;\";\nconst ast = babylon.parse(code, { allowReturnOutsideFunction: true });\nconst { code, map, ast } = babel.transformFromAst(ast, code, options);\n```\n\n## Options\n\n<blockquote class=\"babel-callout babel-callout-info\">\n  <h4>Babel CLI</h4>\n  <p>\n    You can pass these options from the Babel CLI like so:\n  </p>\n  <p>\n    <code>babel --name<span class=\"o\">=</span>value</code>\n  </p>\n</blockquote>\n\nFollowing is a table of the options you can use:\n\n| Option                   | Default              | Description                     |\n| ------------------------ | -------------------- | ------------------------------- |\n| `ast`                    | `true`               | Include the AST in the returned object |\n| `auxiliaryCommentAfter`  | `null`               | Attach a comment after all non-user injected code. |\n| `auxiliaryCommentBefore` | `null`               | Attach a comment before all non-user injected code. |\n| `babelrc`                | `true`               | Specify whether or not to use .babelrc and .babelignore files. Not available when using the CLI, [use `--no-babelrc` instead](https://babeljs.io/docs/usage/cli/#babel-ignoring-babelrc). |\n| `code`                   | `true`               | Enable code generation |\n| `comments`               | `true`               | Output comments in generated output. |\n| `compact`                | `\"auto\"`             | Do not include superfluous whitespace characters and line terminators. When set to `\"auto\"` compact is set to `true` on input sizes of >500KB. |\n| `env`                    | `{}`                 | This is an object of keys that represent different environments. For example, you may have: `{ env: { production: { /* specific options */ } } }` which will use those options when the environment variable `BABEL_ENV` is set to `\"production\"`. If `BABEL_ENV` isn't set then `NODE_ENV` will be used, if it's not set then it defaults to `\"development\"` |\n| `extends`                | `null`               | A path to an `.babelrc` file to extend |\n| `filename`               | `\"unknown\"`          | Filename for use in errors etc. |\n| `filenameRelative`       | `(filename)`         | Filename relative to `sourceRoot`. |\n| `generatorOpts`          | `{}`                 | An object containing the options to be passed down to the babel code generator, babel-generator |\n| `getModuleId`            | `null`               | Specify a custom callback to generate a module id with. Called as `getModuleId(moduleName)`. If falsy value is returned then the generated module id is used. |\n| `highlightCode`          | `true`               | ANSI highlight syntax error code frames |\n| `ignore`                 | `null`               | Opposite to the `only` option. `ignore` is disregarded if `only` is specified. |\n| `inputSourceMap`         | `null`               | A source map object that the output source map will be based on. |\n| `minified`               | `false`              | Should the output be minified (not printing last semicolons in blocks, printing literal string values instead of escaped ones, stripping `()` from `new` when safe) |\n| `moduleId`               | `null`               | Specify a custom name for module ids. |\n| `moduleIds`              | `false`              | If truthy, insert an explicit id for modules. By default, all modules are anonymous. (Not available for `common` modules) |\n| `moduleRoot`             | `(sourceRoot)`       | Optional prefix for the AMD module formatter that will be prepend to the filename on module definitions. |\n| `only`                   | `null`               | A [glob](https://github.com/isaacs/minimatch), regex, or mixed array of both, matching paths to **only** compile. Can also be an array of arrays containing paths to explicitly match. When attempting to compile a non-matching file it's returned verbatim. |\n| `parserOpts`             | `{}`                 | An object containing the options to be passed down to the babel parser, babylon |\n| `plugins`                | `[]`                 | List of [plugins](https://babeljs.io/docs/plugins/) to load and use. |\n| `presets`                | `[]`                 | List of [presets](https://babeljs.io/docs/plugins/#presets) (a set of plugins) to load and use. |\n| `retainLines`            | `false`              | Retain line numbers. This will lead to wacky code but is handy for scenarios where you can't use source maps. (**NOTE:** This will not retain the columns) |\n| `resolveModuleSource`    | `null`               | Resolve a module source ie. `import \"SOURCE\";` to a custom value. Called as `resolveModuleSource(source, filename)`. |\n| `shouldPrintComment`     | `null`               | An optional callback that controls whether a comment should be output or not. Called as `shouldPrintComment(commentContents)`. **NOTE:** This overrides the `comment` option when used. |\n| `sourceFileName`         | `(filenameRelative)` | Set `sources[0]` on returned source map. |\n| `sourceMaps`             | `false`              | If truthy, adds a `map` property to returned output. If set to `\"inline\"`, a comment with a sourceMappingURL directive is added to the bottom of the returned code. If set to `\"both\"` then a `map` property is returned as well as a source map comment appended. **This does not emit sourcemap files by itself!** To have sourcemaps emitted using the CLI, you must pass it the `--source-maps` option. |\n| `sourceMapTarget`        | `(filenameRelative)` | Set `file` on returned source map. |\n| `sourceRoot`             | `(moduleRoot)`       | The root from which all sources are relative. |\n| `sourceType`             | `\"module\"`           | Indicate the mode the code should be parsed in. Can be either \"script\" or \"module\". |\n| `wrapPluginVisitorMethod`| `null`               | An optional callback that can be used to wrap visitor methods. **NOTE:** This is useful for things like introspection, and not really needed for implementing anything. Called as `wrapPluginVisitorMethod(pluginAlias, visitorType, callback)`.\n",
    "maintainers": [
      {
        "email": "bng412@gmail.com",
        "name": "existentialism"
      },
      {
        "email": "me@thejameskyle.com",
        "name": "thejameskyle"
      },
      {
        "email": "sebmck@gmail.com",
        "name": "sebmck"
      },
      {
        "email": "daniel@tschinder.de",
        "name": "danez"
      },
      {
        "email": "hi@henryzoo.com",
        "name": "hzoo"
      },
      {
        "email": "loganfsmyth@gmail.com",
        "name": "loganfsmyth"
      }
    ],
    "homepage": "https://babeljs.io/",
    "keywords": [
      "6to5",
      "babel",
      "classes",
      "const",
      "es6",
      "harmony",
      "let",
      "modules",
      "transpile",
      "transpiler",
      "var",
      "babel-core",
      "compiler"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/babel/babel/tree/master/packages/babel-core"
    },
    "author": {
      "name": "Sebastian McKenzie",
      "email": "sebmck@gmail.com"
    },
    "readmeFilename": "README.md",
    "users": {
      "rblopes": true,
      "yodairish": true,
      "borjes": true,
      "wkaifang": true,
      "taopaic": true,
      "ugarz": true,
      "daviddraughn": true,
      "evertonrobertoauler": true,
      "bdougherty": true,
      "draganhr": true,
      "piecioshka": true,
      "manxisuo": true,
      "urbantumbleweed": true,
      "fmoliveira": true,
      "junjiansyu": true,
      "iolo": true,
      "koulmomo": true,
      "ambdxtrch": true,
      "po": true,
      "abdihaikal": true,
      "kytart": true,
      "shelling": true,
      "sergeymakoveev": true,
      "cfleschhut": true,
      "porreh": true,
      "modao": true,
      "kizzlebot": true,
      "wangnan0610": true,
      "vutran": true,
      "abdul": true,
      "seaseng": true,
      "nickeltobias": true,
      "dhampik": true,
      "wouter_vdb": true,
      "walkerbe": true,
      "princetoad": true,
      "taronyu": true,
      "strokirk": true,
      "isik": true,
      "eliaslfox": true,
      "dskecse": true,
      "asm2hex": true,
      "alexjsdev": true,
      "klimnikita": true,
      "camirmas": true,
      "lorenazohar": true,
      "amirrustam": true,
      "fchienvuhoang": true,
      "tonyljl526": true,
      "npm_gjj": true,
      "yanyinhong": true,
      "maninacan": true,
      "vipergtsrz": true,
      "leonardorb": true,
      "mswanson1524": true,
      "langri-sha": true,
      "sajera": true,
      "yeoyou": true,
      "michalskuza": true,
      "finnhvman": true,
      "tcrowe": true,
      "joris-van-der-wel": true,
      "evdokimovm": true,
      "kevinagin": true,
      "mrzmmr": true,
      "shaomingquan": true,
      "jacobmischka": true,
      "koobitor": true,
      "serge-nikitin": true,
      "mikedfunk": true,
      "nate-river": true,
      "abpeinado": true,
      "qafir": true,
      "miadzadfallah": true,
      "dankle": true,
      "sean-oneal": true,
      "n0f3": true,
      "heartnett": true,
      "atulmy": true,
      "modood": true,
      "frzi": true,
      "orenschwartz": true,
      "sibawite": true,
      "dhanya-kr": true,
      "shentengtu": true,
      "borasta": true,
      "buzzpsych": true,
      "mtdalpizzol": true,
      "alexdevero": true,
      "gvhinks": true,
      "manojkhannakm": true,
      "mpsenn": true,
      "albertico88": true,
      "karzanosman984": true,
      "lqweb": true,
      "luiko": true,
      "tiggem1993": true,
      "rossdavis": true,
      "yeming": true,
      "azz": true,
      "robinblomberg": true,
      "kmathmann": true,
      "jream": true,
      "akshymalvia": true,
      "rogeriera": true,
      "hexagon6": true,
      "ksugiura": true,
      "fakefarm": true,
      "maddas": true,
      "yangzw": true,
      "shamilton": true,
      "adamduehansen": true,
      "jedchang": true,
      "tonyetro": true,
      "oboochin": true,
      "alexjeffcott": true,
      "dyakovk": true,
      "mskjp": true,
      "phil1929": true,
      "morogasper": true,
      "sairus2k": true,
      "leor": true,
      "iceriver2": true,
      "marvelsq": true,
      "nsaboo": true,
      "smtnkc": true,
      "jaredwilli": true,
      "derrickbeining": true,
      "serabus": true,
      "suryasaripalli": true,
      "kasumi": true,
      "will.nielsen": true,
      "juananto11": true,
      "caebbage": true,
      "centiball": true,
      "sm1215": true,
      "minggangw": true,
      "gpmetheny": true
    },
    "license": "MIT",
    "_attachments": {},
    "manifest": {
      "name": "babel-core",
      "version": "6.26.0",
      "description": "Babel compiler core.",
      "author": {
        "name": "Sebastian McKenzie",
        "email": "sebmck@gmail.com"
      },
      "homepage": "https://babeljs.io/",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "https://github.com/babel/babel/tree/master/packages/babel-core"
      },
      "keywords": [
        "6to5",
        "babel",
        "classes",
        "const",
        "es6",
        "harmony",
        "let",
        "modules",
        "transpile",
        "transpiler",
        "var",
        "babel-core",
        "compiler"
      ],
      "scripts": {
        "bench": "make bench",
        "test": "make test"
      },
      "dependencies": {
        "babel-code-frame": "^6.26.0",
        "babel-generator": "^6.26.0",
        "babel-helpers": "^6.24.1",
        "babel-messages": "^6.23.0",
        "babel-register": "^6.26.0",
        "babel-runtime": "^6.26.0",
        "babel-template": "^6.26.0",
        "babel-traverse": "^6.26.0",
        "babel-types": "^6.26.0",
        "babylon": "^6.18.0",
        "convert-source-map": "^1.5.0",
        "debug": "^2.6.8",
        "json5": "^0.5.1",
        "lodash": "^4.17.4",
        "minimatch": "^3.0.4",
        "path-is-absolute": "^1.0.1",
        "private": "^0.1.7",
        "slash": "^1.0.0",
        "source-map": "^0.5.6"
      },
      "devDependencies": {
        "babel-helper-fixtures": "^6.26.0",
        "babel-helper-transform-fixture-test-runner": "^6.26.0",
        "babel-polyfill": "^6.26.0"
      },
      "_id": "babel-core@6.26.0",
      "_shasum": "af32f78b31a6fcef119c87b0fd8d9753f03a0bb8",
      "_from": ".",
      "_npmVersion": "4.6.1",
      "_nodeVersion": "6.9.0",
      "_npmUser": {
        "name": "hzoo",
        "email": "hi@henryzoo.com"
      },
      "dist": {
        "shasum": "af32f78b31a6fcef119c87b0fd8d9753f03a0bb8",
        "tarball": "https://registry.npmjs.org/babel-core/-/babel-core-6.26.0.tgz"
      },
      "maintainers": [
        {
          "email": "me@thejameskyle.com",
          "name": "thejameskyle"
        },
        {
          "email": "sebmck@gmail.com",
          "name": "sebmck"
        },
        {
          "email": "daniel@tschinder.de",
          "name": "danez"
        },
        {
          "email": "hi@henryzoo.com",
          "name": "hzoo"
        },
        {
          "email": "loganfsmyth@gmail.com",
          "name": "loganfsmyth"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/babel-core-6.26.0.tgz_1502898861183_0.43529116874560714"
      },
      "directories": {}
    },
    "releaseDate": "2017-08-16T15:54:21.303Z"
  },
  "sourceInfo": {
    "type": "git",
    "provider": "github",
    "url": "https://github.com/babel/babel",
    "revision": "ddebc2bfc42fd92ffb09114682a0f7f1d8713f06",
    "path": null
  }
}